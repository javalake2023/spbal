[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 spbal authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/spbal.html","id":"spbal","dir":"Articles","previous_headings":"","what":"spbal","title":"spbal - Spatially Balanced Sampling","text":"vignette intended provide details functions methods provided spbal package. spbal package three spatially balanced sample designs: BAS, Halton Frames HIP. document illustrates samples drawn using spbal, including master stratified sampling applications. package freely available CRAN. document created spbal version \\(1.0.0\\). vignette divided following sections: Simple Random Sampling (SRS) Balanced acceptance sampling (BAS) Halton Frames (HF) Halton Iterative Partitioning (HIP) Lets start looking Simple Random Sampling (SRS).","code":""},{"path":"/articles/spbal.html","id":"simple-random-sampling-srs","dir":"Articles","previous_headings":"spbal","what":"Simple Random Sampling (SRS)","title":"spbal - Spatially Balanced Sampling","text":"Draw random sample without replacement population.","code":""},{"path":"/articles/spbal.html","id":"spbalsrs","dir":"Articles","previous_headings":"spbal > Simple Random Sampling (SRS)","what":"spbal::SRS()","title":"spbal - Spatially Balanced Sampling","text":"function invokes base::sample() draw random sample using user specified random seed. Returned list random positive integers length sample_size, range \\(1\\) total_rows, can used index original population data. following parameters supported: seed - random seed used draw current sample. default \\(42\\). total_rows - total number rows population. sample_size - number rows wanted random sample. parameter values must numeric values greater zero, sample_size must less total_rows.","code":""},{"path":"/articles/spbal.html","id":"spbalsrs-code-example","dir":"Articles","previous_headings":"spbal > Simple Random Sampling (SRS) > spbal::SRS()","what":"spbal::SRS() code example","title":"spbal - Spatially Balanced Sampling","text":"Function spbal::SRS() returns list size sample_size.","code":"# Create a random sample of 20 with a seed of 99 from a population of 100. rand_samp <- spbal::SRS(seed = 99, total_rows = 100, sample_size = 20) rand_samp #>  [1] 48 33 44 22 62 32 13 20 31 68  9 82 88 30 86 84 95 14  4 78"},{"path":"/articles/spbal.html","id":"balanced-acceptance-samples-bas","dir":"Articles","previous_headings":"spbal","what":"Balanced Acceptance Samples (BAS)","title":"spbal - Spatially Balanced Sampling","text":"BAS draws spatially balanced samples areal resources. draw BAS samples, spbal requires study region shapefile region’s bounding box. initial sample size also needed, can easily increased decreased within spbal master sampling applications.","code":""},{"path":"/articles/spbal.html","id":"spbalbas","dir":"Articles","previous_headings":"spbal > Balanced Acceptance Samples (BAS)","what":"spbal::BAS()","title":"spbal - Spatially Balanced Sampling","text":"spbal::BAS() function supports following input parameters: shapefile shape file polygon (sp sf) select sites . n number sites select. using stratification named vector containing sample sizes group. boundingbox Bounding box around study area. bounding box supplied spbal generate bounding box shapefile. minRadius specified, minimum distance, meters, allowed sample points. applied $sample points. Points meet minRadius criteria returned minRadius output variable. default value minRadius. panels list integers define size panel non-overlapping panels design. length list determines number panels required. sum integers panels parameter determine total number samples selected, n. default value panels NULL, indicates non-overlapping panel design wanted. panel_overlap list integers define overlap previous panel. used panels parameter NULL. default value panel_overlap NULL. length panel_overlap must equal length panels. first value always forced zero first panel never overlaps region. stratum name column data.frame attached shapefile defines strata interest. seeds vector two seeds, u1 u2. specified, default NULL defined randomly. verbose boolean, want see output printed screen set TRUE. Helpful taking long time. default FALSE .e. informational messages displayed. spbal::BAS() function returns list containing three variables: sample containing locations BAS sample, BAS order. seeds u1 u2 seeds used generate sample. minRadius containing points sample meet minRadius criteria. minRadius parameter NULL minRadius return NULL. sample points returned form simple feature collection POINT objects. following attributes: SiteID unique identifier every sample point. encodes BAS order. spbalSeqID unique identifier every sample point. encodes BAS sample order. geometry XY co-ordinates sample point CRS original shapefile.","code":""},{"path":"/articles/spbal.html","id":"spbalbas-code-examples","dir":"Articles","previous_headings":"spbal > Balanced Acceptance Samples (BAS) > spbal::BAS()","what":"spbal::BAS() code examples","title":"spbal - Spatially Balanced Sampling","text":"First, lets define shapefile, select region within define bounding box around :","code":"# Use the North Carolina shapefile supplied in the sf R package. shp_file <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\")) #> Reading layer `nc' from data source  #>   `/home/phil/R/x86_64-pc-linux-gnu-library/4.3/sf/shape/nc.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 shp_gates <- shp_file[shp_file$NAME == \"Gates\",] shp_gates #> Simple feature collection with 1 feature and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -76.95367 ymin: 36.29452 xmax: -76.46035 ymax: 36.55525 #> Geodetic CRS:  NAD27 #>    AREA PERIMETER CNTY_ CNTY_ID  NAME  FIPS FIPSNO CRESS_ID BIR74 SID74 NWBIR74 #> 8 0.091     1.284  1835    1835 Gates 37073  37073       37   420     0     254 #>   BIR79 SID79 NWBIR79                       geometry #> 8   594     2     371 MULTIPOLYGON (((-76.56251 3... # Vertically aligned master sample bounding box. bb <- spbal::BoundingBox(shapefile = shp_gates)"},{"path":"/articles/spbal.html","id":"equal-probability-bas-sample-","dir":"Articles","previous_headings":"spbal > Balanced Acceptance Samples (BAS)","what":"Equal probability BAS sample.","title":"spbal - Spatially Balanced Sampling","text":"section uses Gates county loaded . first example design equal probability BAS sample \\(n = 20\\) survey sites Gates, North Carolina, U.S.. call : site locations illustrated :","code":"set.seed(511) n_samples <- 20 result <- spbal::BAS(shapefile = shp_gates,                      n = n_samples,                      boundingbox = bb) BAS20 <- result$sample BAS20 #> Simple feature collection with 20 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.93224 ymin: 36.30596 xmax: -76.51599 ymax: 36.54738 #> Geodetic CRS:  NAD27 #> First 10 features: #>    SiteID spbalSeqID                   geometry #> 1       1          1 POINT (-76.88599 36.41219) #> 2       2          2  POINT (-76.63932 36.4991) #> 3       3          3 POINT (-76.76266 36.35425) #> 4       4          4 POINT (-76.51599 36.44116) #> 6       6          5 POINT (-76.67016 36.30596) #> 7       7          6 POINT (-76.79349 36.39287) #> 8       8          7 POINT (-76.54683 36.47979) #> 10     10          8 POINT (-76.60849 36.42184) #> 11     11          9 POINT (-76.73182 36.50876) #> 13     13         10 POINT (-76.93224 36.45082) # 1. Plot using ggplot gates <- sf::st_as_sf(shp_gates, coords = c(\"longitude\", \"latitude\"))  ggplot() +   geom_sf() +   geom_sf(data = gates, size = 4, shape = 23) +   geom_text(data = BAS20,             size = 3,             aes(label = spbalSeqID,                 vjust = -0.5,                 geometry = geometry,                 x = after_stat(x),                 y = after_stat(y), color = \"ID\"),             stat = \"sf_coordinates\") +   geom_point(data = BAS20,              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour= \"Samples\"),              stat = \"sf_coordinates\"   ) +   scale_color_manual(values = c(\"red\", \"black\"),                      name = \"Legend\") +  # Define color scale and legend title   theme_bw() +   labs(x = \"Latitude\",        y = \"Longitude\",        title = \"Spatially balanced sample using a equal probability BAS design.\",        subtitle = \"Total of 20 survey sites from Gates, North Carolina\",        caption = \"spbal Equal probability BAS sample.\") #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data"},{"path":"/articles/spbal.html","id":"increase-the-bas-sample-size-","dir":"Articles","previous_headings":"spbal > Balanced Acceptance Samples (BAS)","what":"Increase the BAS sample size.","title":"spbal - Spatially Balanced Sampling","text":"increase BAS sample \\(20\\) sites \\(50\\) sites, take first \\(50\\) points random-start Halton sequence BAS used draw sample. spbal achieves specifying random seed integers first sample using following call. first 20 sites BAS50 identical BAS20. sample size can increased arbitrarily specified seed, making BAS well-suited master sampling applications. critical point sub-sample consecutive points BAS master sample bona fide BAS sample. Users can also specify seed point using seeds = c(u1, u2) generate specific random-start Halton sequence, resurrecting previously used BAS sample. Plot BAS point ordering, BAS20 BAS50 using ggplot.","code":"n_samples <- 50 result2 <- spbal::BAS(shapefile = shp_gates,                       n = n_samples,                       boundingbox = bb,                       seeds = result$seed) BAS50 <- result2$sample BAS50 #> Simple feature collection with 50 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.93224 ymin: 36.30596 xmax: -76.49287 ymax: 36.5506 #> Geodetic CRS:  NAD27 #> First 10 features: #>    SiteID spbalSeqID                   geometry #> 1       1          1 POINT (-76.88599 36.41219) #> 2       2          2  POINT (-76.63932 36.4991) #> 3       3          3 POINT (-76.76266 36.35425) #> 4       4          4 POINT (-76.51599 36.44116) #> 6       6          5 POINT (-76.67016 36.30596) #> 7       7          6 POINT (-76.79349 36.39287) #> 8       8          7 POINT (-76.54683 36.47979) #> 10     10          8 POINT (-76.60849 36.42184) #> 11     11          9 POINT (-76.73182 36.50876) #> 13     13         10 POINT (-76.93224 36.45082) # Check, first n_samples points in both samples must be the same. all.equal(BAS20$geometry, BAS50$geometry[1:20]) #> [1] TRUE ## Convert foreign object to an sf object for ggplot. gates <- sf::st_as_sf(shp_gates, coords = c(\"longitude\", \"latitude\")) ggplot() +   geom_sf() +   geom_sf(data = gates, size = 4, shape = 23) +   geom_text(data = BAS50,             size = 2,             aes(label = BAS50$spbalSeqID,                 vjust = -0.7,                 geometry = geometry,                 x = after_stat(x),                 y = after_stat(y), color = \"BAS Order\"),             stat = \"sf_coordinates\") +   geom_point(data = BAS50,              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour = \"BAS n = 20 + 30\"),                  stat = \"sf_coordinates\")+   geom_point(data = BAS20,              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour = \"BAS n = 20\"),                  stat = \"sf_coordinates\"   ) +  scale_color_manual(values = c(\"red\",\"blue\",\"black\"),                     name = \"Legend\") +    theme_bw() +  labs(x = \"Latitude\",       y = \"Longitude\",       title = \"BAS samples from the Gates county.\")"},{"path":"/articles/spbal.html","id":"stratified-bas-sample-","dir":"Articles","previous_headings":"spbal > Balanced Acceptance Samples (BAS)","what":"Stratified BAS Sample.","title":"spbal - Spatially Balanced Sampling","text":"possible create stratified samples BAS master samples using spbal. implement design, input shapefile must labelled sub-regions strata, enclosed within single bounding box. example stratified design BAS master sample shown . design, \\(50\\) sites selected three counties state North Carolina, U.S., \\(20\\) sites Gates, \\(20\\) Northampton, \\(10\\) Hertford. code stratified design provided , survey sites within stratum can seen figure . Define bounding box Gates, Northampton Hertford using spbal. Draw stratified sample BAS master sample display first three sites Gates region. Plot stratified sample using ggplot.","code":"strata <- c(\"Gates\", \"Northampton\", \"Hertford\") n_strata <- c(\"Gates\" = 20, \"Northampton\" = 20, \"Hertford\" = 10) shp_subset <- shp_file[shp_file[[\"NAME\"]] %in% strata,] bb_strata <- spbal::BoundingBox(shapefile = shp_subset) set.seed(511) result3 <- spbal::BAS(shapefile = shp_subset,                       n = n_strata,                       boundingbox = bb_strata,                       stratum = \"NAME\") BASMaster <- result3$sample gates_samp <- BASMaster[BASMaster[[\"NAME\"]] %in% \"Gates\",] gates_samp  #> Simple feature collection with 20 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.92399 ymin: 36.33299 xmax: -76.49623 ymax: 36.54675 #> Geodetic CRS:  NAD27 #> First 10 features: #>    SiteID spbalSeqID  NAME                   geometry #> 1       1          1 Gates  POINT (-76.53563 36.5266) #> 5       9          2 Gates    POINT (-76.58066 36.41) #> 7      13          3 Gates  POINT (-76.67071 36.4683) #> 8      15          4 Gates POINT (-76.85082 36.38085) #> 13     25          5 Gates POINT (-76.60317 36.46902) #> 16     31          6 Gates POINT (-76.87333 36.43987) #> 19     37          7 Gates POINT (-76.73825 36.52732) #> 23     45          8 Gates  POINT (-76.6482 36.41072) #> 31     61          9 Gates POINT (-76.72136 36.48845) #> 32     63         10 Gates   POINT (-76.90147 36.401) strat <- sf::st_as_sf(shp_subset, coords = c(\"longitude\", \"latitude\"))  gates_samp       <- BASMaster[BASMaster[[\"NAME\"]] %in% \"Gates\",] northampton_samp <- BASMaster[BASMaster[[\"NAME\"]] %in% \"Northampton\",] hertford_samp    <- BASMaster[BASMaster[[\"NAME\"]] %in% \"Hertford\",]  ggplot() +   geom_sf() +   geom_sf(data = strat, size = 4, shape = 23) +   geom_point(data = gates_samp,              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour= \"Gates\"),              stat = \"sf_coordinates\"   ) +   geom_point(data = northampton_samp,              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour= \"Northampton\"),              stat = \"sf_coordinates\"   ) +   geom_point(data = hertford_samp,              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour= \"Hertford\"),              stat = \"sf_coordinates\"   ) +   scale_color_manual(values = c(\"red\", \"blue\", \"green\"),                      name = \"Legend\") +  # Define color scale and legend title   theme_bw() +   labs(x = \"Latitude\",        y = \"Longitude\",        title = \"Stratified samples from BAS master samples.\",        subtitle = \"50 sites from North Carolina, U.S.A, 20 from Gates, \\n20 from Northampton and 10 from Hertford.\",        caption = \"spbal Stratified BAS sample.\") #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data"},{"path":"/articles/spbal.html","id":"increasing-or-decreasing-strata-sample-sizes-","dir":"Articles","previous_headings":"spbal > Balanced Acceptance Samples (BAS)","what":"Increasing or decreasing strata sample sizes.","title":"spbal - Spatially Balanced Sampling","text":"stratum sample sizes can easily increased decreased using points master sample. instance, one may double number survey sites Hertford stratum (\\(10\\) \\(20\\)) stratified design using seeds input. call . \\(20\\) sites gates_samp2 identical gates_samp seed point used. Plot increased stratified sample using ggplot.","code":"n_strata <- c(\"Gates\" = 20, \"Northampton\" = 20, \"Hertford\" = 20) result4 <- spbal::BAS(shapefile = shp_subset,                       n = n_strata,                       boundingbox = bb_strata,                       seeds = result3$seed,                       stratum = \"NAME\") BASMaster <- result4$sample gates_samp2 <- BASMaster[BASMaster[[\"NAME\"]] %in% \"Gates\",] gates_samp2 #> Simple feature collection with 20 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.92399 ymin: 36.33299 xmax: -76.49623 ymax: 36.54675 #> Geodetic CRS:  NAD27 #> First 10 features: #>    SiteID spbalSeqID  NAME                   geometry #> 1       1          1 Gates  POINT (-76.53563 36.5266) #> 5       9          2 Gates    POINT (-76.58066 36.41) #> 7      13          3 Gates  POINT (-76.67071 36.4683) #> 8      15          4 Gates POINT (-76.85082 36.38085) #> 13     25          5 Gates POINT (-76.60317 36.46902) #> 16     31          6 Gates POINT (-76.87333 36.43987) #> 19     37          7 Gates POINT (-76.73825 36.52732) #> 23     45          8 Gates  POINT (-76.6482 36.41072) #> 31     61          9 Gates POINT (-76.72136 36.48845) #> 32     63         10 Gates   POINT (-76.90147 36.401) # Ensure gates_samp is equal to the first 10 sites in gates_samp2. Must return TRUE. all.equal(gates_samp$geometry[1:20], gates_samp2$geometry[1:20]) #> [1] TRUE gates_samp4       <- BASMaster[BASMaster[[\"NAME\"]] %in% \"Gates\",] northampton_samp4 <- BASMaster[BASMaster[[\"NAME\"]] %in% \"Northampton\",] hertford_samp4    <- BASMaster[BASMaster[[\"NAME\"]] %in% \"Hertford\",]  ggplot() +   geom_sf() +   geom_sf(data = strat, size = 4, shape = 23) +   geom_point(data = gates_samp4,              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour= \"Gates\"),              stat = \"sf_coordinates\"   ) +   geom_point(data = northampton_samp4,              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour= \"Northampton\"),              stat = \"sf_coordinates\"   ) +   geom_point(data = hertford_samp4,              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour= \"Hertford\"),              stat = \"sf_coordinates\"   ) +   scale_color_manual(values = c(\"red\", \"blue\", \"green\"),                      name = \"Legend\") +  # Define color scale and legend title   theme_bw() +   labs(x = \"Latitude\",        y = \"Longitude\",        title = \"Stratified samples from BAS master samples.\",        subtitle = \"60 sites from North Carolina, U.S.A, 20 from Gates, \\n20 from Northampton and 20 from Hertford.\",        caption = \"spbal Stratified BAS samples.\") #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data"},{"path":"/articles/spbal.html","id":"non-overlapping-panel-design-","dir":"Articles","previous_headings":"spbal > Balanced Acceptance Samples (BAS)","what":"Non-Overlapping panel design.","title":"spbal - Spatially Balanced Sampling","text":"final BAS example design spbal non-overlapping panel design surveying time. design three panels containing \\(20\\) survey sites county Gates, North Carolina, U.S.. panel spatially balanced sample size \\(n = 20\\), collection sites panels spatially balanced sample size \\(n = 60\\). sites panel \\(2\\) obtained using getPanel() function follows. Plot sample sites panel using ggplot.","code":"set.seed(511)  n_panels <- c(20, 20, 20) result5 <- spbal::BAS(shapefile = shp_gates,                       panels = n_panels,                       boundingbox = bb) BASpanel <- result5$sample BASpanel #> Simple feature collection with 60 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.93224 ymin: 36.29738 xmax: -76.49287 ymax: 36.5506 #> Geodetic CRS:  NAD27 #> First 10 features: #>    SiteID spbalSeqID                   geometry panel_id #> 1       1          1 POINT (-76.88599 36.41219)        1 #> 2       2          2  POINT (-76.63932 36.4991)        1 #> 3       3          3 POINT (-76.76266 36.35425)        1 #> 4       4          4 POINT (-76.51599 36.44116)        1 #> 6       6          5 POINT (-76.67016 36.30596)        1 #> 7       7          6 POINT (-76.79349 36.39287)        1 #> 8       8          7 POINT (-76.54683 36.47979)        1 #> 10     10          8 POINT (-76.60849 36.42184)        1 #> 11     11          9 POINT (-76.73182 36.50876)        1 #> 13     13         10 POINT (-76.93224 36.45082)        1 panel_2 <- spbal::getPanel(BASpanel, 2) panel_2 <- panel_2$sample panel_2 #> Simple feature collection with 20 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.90911 ymin: 36.31884 xmax: -76.49287 ymax: 36.5506 #> Geodetic CRS:  NAD27 #> First 10 features: #>    SiteID spbalSeqID                   geometry panel_id #> 30     30         21 POINT (-76.69328 36.35747)        2 #> 31     31         22 POINT (-76.81661 36.44438)        2 #> 32     32         23 POINT (-76.56995 36.53129)        2 #> 34     34         24 POINT (-76.63162 36.39609)        2 #> 35     35         25   POINT (-76.75495 36.483)        2 #> 37     37         26 POINT (-76.90911 36.42506)        2 #> 38     38         27 POINT (-76.66245 36.51198)        2 #> 39     39         28 POINT (-76.78578 36.36712)        2 #> 40     40         29 POINT (-76.53912 36.45403)        2 #> 41     41         30 POINT (-76.84745 36.54095)        2 # to extract the sample points associated with a specific panelid, we can use the following code: panel_1 <- BASpanel[BASpanel$panel_id == 1,] panel_2 <- BASpanel[BASpanel$panel_id == 2,] panel_3 <- BASpanel[BASpanel$panel_id == 3,]  # or use the spbal::getPanel() function. #panel_1 <- spbal::getPanel(BASpanel, 1) #panel_2 <- spbal::getPanel(BASpanel, 2) #panel_3 <- spbal::getPanel(BASpanel, 3)  ggplot() +   geom_sf() +   geom_sf(data = gates, size = 4, shape = 23) +   geom_point(data = panel_1,              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour= \"Panel-1 (n = 20)\"),                  stat = \"sf_coordinates\"   ) +   geom_point(data = panel_2,              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour= \"Panel-2 (n = 20)\"),                  stat = \"sf_coordinates\"   ) +   geom_point(data = panel_3,              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour= \"Panel-3 (n = 20)\"),                  stat = \"sf_coordinates\"   ) +   scale_color_manual(values = c(\"red\", \"blue\", \"black\"),                                      name = \"Panels\") +    theme_bw() +   labs(x = \"Latitude\",        y = \"Longitude\",        title = \"Panel Design from BAS Master Sample\",        subtitle = \"Total of 60 survey sites from Gates, North Carolina, U.S.A\",        caption = \"spbal Non-overlapping Panel Design.\")"},{"path":"/articles/spbal.html","id":"overlapping-panel-design-","dir":"Articles","previous_headings":"spbal > Balanced Acceptance Samples (BAS)","what":"Overlapping panel design.","title":"spbal - Spatially Balanced Sampling","text":"Panel overlaps also possible spbal. following call sets last five elements panel \\(1\\) first five elements panel \\(2\\) last five elements panel \\(2\\) first five elements panel \\(3\\) (\\(50\\) unique sites). overlaps sub-samples consecutive BAS points, well-spread study region. Furthermore, panel spatially balanced sample size \\(n = 20\\), collection sites panels spatially balanced sample size \\(n = 50\\). sites panel \\(2\\) obtained using getPanel() function follows. first five sites panel \\(2\\) also panel \\(1\\) panel_id = \\(1, 2\\) sites. Plot overlapped samples.","code":"set.seed(511) n_panels <- c(20, 20, 20) n_panel_overlap <- c(0, 5, 5) result6 <- spbal::BAS(shapefile = shp_gates,                       panels = n_panels,                       panel_overlap = n_panel_overlap,                       boundingbox = bb) BASpanel <- result6$sample panel_2 <- spbal::getPanel(BASpanel, 2) panel_2 <- panel_2$sample panel_2[1:5,] #> Simple feature collection with 5 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.83974 ymin: 36.3285 xmax: -76.59308 ymax: 36.54738 #> Geodetic CRS:  NAD27 #>    SiteID spbalSeqID                   geometry panel_id #> 22     22         16 POINT (-76.65474 36.46047)     1, 2 #> 23     23         17 POINT (-76.77807 36.54738)     1, 2 #> 25     25         18 POINT (-76.83974 36.38644)     1, 2 #> 26     26         19 POINT (-76.59308 36.47335)     1, 2 #> 27     27         20  POINT (-76.71641 36.3285)     1, 2 panel_1 <- spbal::getPanel(BASpanel, 1) panel_2 <- spbal::getPanel(BASpanel, 2) panel_3 <- spbal::getPanel(BASpanel, 3)  ggplot() +   geom_sf() +   geom_sf(data = gates, size = 4, shape = 23) +   geom_jitter(width = 10, height = 10) +   geom_point(data = sf::st_jitter(panel_1$sample, 0.02),              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour= \"Panel-1\"),              stat = \"sf_coordinates\"   ) +   geom_point(data = sf::st_jitter(panel_2$sample, 0.02),              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour= \"Panel-2\"),              stat = \"sf_coordinates\"   ) +   geom_point(data = panel_3$sample,              aes(geometry = geometry,                  x = after_stat(x),                  y = after_stat(y), colour= \"Panel-3\"),              stat = \"sf_coordinates\"   ) +   scale_color_manual(values = c(\"red\", \"blue\", \"green\"),                      name = \"Overlapped Panels\") +  # Define color scale and legend title   theme_bw() +   labs(x = \"Latitude\",        y = \"Longitude\",        title = \"Spatially balanced sample using a overlapping panel \\ndesign, of three panels, each containing 20 survey sites.\",        subtitle = \"Total of 50 survey sites from Gates, North Carolina. Panel Overlap = (0, 5, 5)\",        caption = \"spbal Overlapping Panel Design.\") #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data"},{"path":"/articles/spbal.html","id":"halton-frame-hf","dir":"Articles","previous_headings":"spbal","what":"Halton Frame (HF)","title":"spbal - Spatially Balanced Sampling","text":"Halton Frames discretize areal resource spatially ordered grid, samples consecutive frame points spatially balanced.","code":""},{"path":"/articles/spbal.html","id":"spbalhaltonframe","dir":"Articles","previous_headings":"spbal > Halton Frame (HF)","what":"spbal::HaltonFrame()","title":"spbal - Spatially Balanced Sampling","text":"spbal::HaltonFrame() function supports following input parameters: shapefile shape file polygon (sp sf) select sites . N number points frame generate. J number grid cells. list \\(2\\) values. default value \\(c(3, 2)\\). bases Co-prime base Halton Sequence. default value \\(c(2, 3)\\). boundingbox bounding box around study area. bounding box supplied spbal generate bounding box shapefile. panels list integers define size panel non-overlapping panels design. length list determines number panels required. sum integers panels parameter determine total number samples selected, n. default value panels NULL, indicates non-overlapping panel design wanted. panel_overlap list integers define overlap previous panel. used panels parameter NULL. default value panel_overlap NULL. length panel_overlap must equal length panels. first value always forced zero first panel never overlaps region. stratum name feature column shapefile defines strata interest. default value NULL indicating stratification performed. seeds vector two seeds, u1 u2. specified, default NULL defined randomly. verbose boolean, want see output printed screen set TRUE. Helpful taking long time. default FALSE .e. informational messages displayed. HaltonFrame() function returns list containing five variables: J number grid cells. list \\(2\\) values used generate Halton grid frame. hg.pts.shp Halton grid bounding box study area. hf.pts.shp Halton frame, sample points within study area. bb bounding box surrounding study area. seeds \\(u1\\) \\(u2\\) seeds used generate sample. sample points hf.pts.shp returned form simple feature collection POINT objects. following features: ID unique identifier, Halton frame point order. spbalSeqID unique identifier, study area point order. x point geometry.","code":""},{"path":"/articles/spbal.html","id":"spbalhaltonframe-code-example","dir":"Articles","previous_headings":"spbal > Halton Frame (HF)","what":"spbal::HaltonFrame() code example","title":"spbal - Spatially Balanced Sampling","text":"generate Halton Frames, spbal requires study region shapefile region’s bounding box. illustrate Halton Frames, discretize Gates study region coarse grid using \\(B = 2^{J_1} \\times 3^{J_2} = 2^3 \\times 3^2\\) (\\(9\\) \\(8\\) grid). call . Spatially ordered \\(9\\) \\(8\\) Halton grid \\((B = 2^{3} * 3^{2} = 72)\\) Gates county North Carolina, U.S..  corresponding Halton Frame Gates county North Carolina U.S..","code":"set.seed(511) result6 <- spbal::HaltonFrame(shapefile = shp_gates,                                J = c(3, 2),                               boundingbox = bb) Frame <- result6$hf.pts.shp Grid <- result6$hg.pts.shp # Grid - Halton grid over Gates county. ggplot() +   geom_sf() +   geom_sf(data = gates, size = 4, shape = 23) +   geom_text(data = Grid,             size = 3,             aes(label = ID,                 vjust = -0.5,                 geometry = x,                 x = after_stat(x),                 y = after_stat(y), color = \"ID\"),             stat = \"sf_coordinates\") +   geom_point(data = Grid,              aes(geometry = x,                  x = after_stat(x),                  y = after_stat(y), colour= \"Samples\"),              stat = \"sf_coordinates\"   ) +   scale_color_manual(values = c(\"red\", \"black\"),                      name = \"Legend\") +  # Define color scale and legend title   theme_bw() +   labs(x = \"Latitude\",        y = \"Longitude\",        title = \"A Halton grid, B = 2^3 * 3^2, over Gates, North Carolina, U.S.A.\",        subtitle = \"A total of 432 points.\",        caption = \"spbal Halton Grid example.\") #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data # Frame - Halton frame over Gates county. ggplot() +   geom_sf() +   geom_sf(data = gates, size = 4, shape = 23) +   geom_text(data = Frame,             size = 3,             aes(label = ID,                 vjust = -0.5,                 geometry = x,                 x = after_stat(x),                 y = after_stat(y), color = \"ID\"),             stat = \"sf_coordinates\") +   geom_point(data = Frame,              aes(geometry = x,                  x = after_stat(x),                  y = after_stat(y), colour= \"Samples\"),              stat = \"sf_coordinates\"   ) +   scale_color_manual(values = c(\"red\", \"black\"),                      name = \"Legend\") +  # Define color scale and legend title   theme_bw() +   labs(x = \"Latitude\",        y = \"Longitude\",        title = \"A Halton frame, B = 2^3 * 3^2, over Gates, North Carolina, U.S.A.\",        subtitle = \"Showing sample points within the Gates shapefile.\",        caption = \"spbal Halton Frame example.\") #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data"},{"path":"/articles/spbal.html","id":"halton-frame-fine-grid","dir":"Articles","previous_headings":"spbal > Halton Frame (HF)","what":"Halton frame fine grid","title":"spbal - Spatially Balanced Sampling","text":"second example frame generates fine grid using approximately regular \\(B = 2^8 \\times 3^5 = 256 \\times 243\\) Halton Frame Gates draws spatially balanced sample \\(n = 25\\). call . Draw \\(n = 25\\) sites Halton Frame using getSample() function. first 25 sites \\(B = 2^{8} * 3^{5}\\) Halton Frame (\\(62,208\\) grid points covering Gates), numbering shows frame’s ordering, sub-samples consecutively numbered points spatially balanced samples. Plot sample number points frame’s order (given spbalSeqID) using ggplot.","code":"set.seed(511) result7 <- spbal::HaltonFrame(shapefile = shp_gates,                               J = c(8, 5),                               boundingbox = bb) Frame <- result7$hf.pts.shp n_samples <- 25 FrameSample <-getSample(shapefile = Frame,                          n = n_samples) FrameSample <- FrameSample$sample FrameSample[1:10, c(\"x\", \"spbalSeqID\")] #> Simple feature collection with 10 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.86985 ymin: 36.33583 xmax: -76.53069 ymax: 36.55364 #> Geodetic CRS:  NAD27 #>                             x spbalSeqID #> 1  POINT (-76.80818 36.37982)          1 #> 2  POINT (-76.56152 36.46673)          2 #> 3  POINT (-76.86985 36.55364)          3 #> 5  POINT (-76.74652 36.38411)          4 #> 8  POINT (-76.65402 36.41308)          5 #> 9  POINT (-76.77735 36.49999)          6 #> 10 POINT (-76.53069 36.35514)          7 #> 11 POINT (-76.83901 36.44205)          8 #> 12 POINT (-76.59235 36.52896)          9 #> 16 POINT (-76.69256 36.33583)         10 ggplot() +   geom_sf() +   geom_sf(data = gates, size = 4, shape = 23) +   geom_text(data = FrameSample,              size = 3,             aes(label = spbalSeqID,                 vjust = -0.5,                 geometry = x,                 x = after_stat(x),                 y = after_stat(y), color = \"Frame Order\"),                 stat = \"sf_coordinates\") +   geom_point(data = FrameSample,               aes(geometry = x,                  x = after_stat(x),                  y = after_stat(y), colour= \"Samples\"),                  stat = \"sf_coordinates\"   ) +   scale_color_manual(values = c(\"black\", \"red\"),                      name = \"Legend\") +  # Define color scale and legend title   theme_bw() +   labs(x = \"Latitude\",        y = \"Longitude\",        title = \"First 25 sites from the Gates Halton Frame.\")"},{"path":"/articles/spbal.html","id":"spatially-balanced-sample-from-a-random-position","dir":"Articles","previous_headings":"spbal > Halton Frame (HF)","what":"Spatially balanced sample from a random position","title":"spbal - Spatially Balanced Sampling","text":"also possible draw spatially balanced sample random position frame using getSample() function. call \\(n = 20\\) sample given . Note use randomStart = TRUE parameter generate sample random position.","code":"n_samples <- 20 FrameSample <-getSample(shapefile = Frame,                          n = n_samples,                          randomStart = TRUE) FrameSample <- FrameSample$sample FrameSample[1:10, c(\"x\", \"spbalSeqID\")] #> Simple feature collection with 10 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.86214 ymin: 36.32188 xmax: -76.52298 ymax: 36.55364 #> Geodetic CRS:  NAD27 #>                                 x spbalSeqID #> 519961 POINT (-76.60006 36.54399)      36721 #> 519971 POINT (-76.72339 36.32188)      36722 #> 520001 POINT (-76.67714 36.35085)      36723 #> 520011 POINT (-76.80047 36.43776)      36724 #> 520021 POINT (-76.55381 36.52467)      36725 #> 520031 POINT (-76.86214 36.37982)      36726 #> 520041 POINT (-76.61548 36.46673)      36727 #> 520051 POINT (-76.73881 36.55364)      36728 #> 520081 POINT (-76.64631 36.47102)      36729 #> 520101 POINT (-76.52298 36.41308)      36730"},{"path":"/articles/spbal.html","id":"halton-frame-overlapping-panel-design-","dir":"Articles","previous_headings":"spbal > Halton Frame (HF)","what":"Halton frame overlapping panel design.","title":"spbal - Spatially Balanced Sampling","text":"following example generates overlapping panel design surveying time three panels, \\(20\\) sites panel overlap five.","code":"set.seed(511)  # Three panels, of 20 samples each. panels <- c(20, 20, 20)  # second panel overlaps first panel by 5, and third panel  # overlaps second panel by 5. panel_overlap <- c(0, 5, 5)  # generate the sample. samp <- spbal::HaltonFrame(J = c(4, 3),                            boundingbox = bb,                            panels = panels,                            panel_overlap = panel_overlap,                            shapefile = shp_gates)  # get halton frame data from our sample. samp3 <- samp$hf.pts.shp samp3 #> Simple feature collection with 309 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.93826 ymin: 36.29935 xmax: -76.47577 ymax: 36.55042 #> Geodetic CRS:  NAD27 #> First 10 features: #>    ID spbalSeqID                          x panel_id #> 1   1          1 POINT (-76.62993 36.50214)        1 #> 2   2          2 POINT (-76.75326 36.35729)        1 #> 3   3          3   POINT (-76.5066 36.4442)        1 #> 4   4          4 POINT (-76.90743 36.53111)        1 #> 5   5          5   POINT (-76.66076 36.309)        1 #> 6   6          6 POINT (-76.78409 36.39591)        1 #> 7   7          7 POINT (-76.53743 36.48283)        1 #> 9   9          8  POINT (-76.5991 36.42488)        1 #> 10 10          9  POINT (-76.72243 36.5118)        1 #> 12 12         10 POINT (-76.93826 36.45386)        1 panelid <- 1 olPanel_1 <- spbal::getPanel(samp3, panelid)  panelid <- 2 olPanel_2 <- spbal::getPanel(samp3, panelid)  panelid <- 3 olPanel_3 <- spbal::getPanel(samp3, panelid)  # Plot using ggplot2 ggplot() +   geom_sf() +   geom_sf(data = gates, size = 4, shape = 23) +   geom_jitter(width = 10, height = 10) +   geom_point(data = sf::st_jitter(olPanel_1$sample, 0.02),              aes(geometry = x,                  x = after_stat(x),                  y = after_stat(y), colour= \"Panel-1\"),              stat = \"sf_coordinates\"   ) +   geom_point(data = sf::st_jitter(olPanel_2$sample, 0.02),              aes(geometry = x,                  x = after_stat(x),                  y = after_stat(y), colour= \"Panel-2\"),              stat = \"sf_coordinates\"   ) +   geom_point(data = olPanel_3$sample,              aes(geometry = x,                  x = after_stat(x),                  y = after_stat(y), colour= \"Panel-3\"),              stat = \"sf_coordinates\"   ) +   scale_color_manual(values = c(\"red\",                                 \"blue\",                                 \"green\"),                      name = \"Overlapped Panels\") +  # Define color scale and legend title   theme_bw() +   labs(x = \"Latitude\",        y = \"Longitude\",        title = \"Halton Frame sample using a overlapping panel \\ndesign, of three panels, each containing 20 survey sites.\",        subtitle = \"Total of 50 survey sites from Gates, North Carolina, U.S.A. Panel Overlap = (0, 5, 5)\",        caption = \"spbal Halton Frame Overlapping Panel Design.\") #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data"},{"path":"/articles/spbal.html","id":"halton-frame-stratified-sample-","dir":"Articles","previous_headings":"spbal > Halton Frame (HF)","what":"Halton Frame Stratified sample.","title":"spbal - Spatially Balanced Sampling","text":"Stratified samples can selected Halton Frame spbal. implement design, input shapefile must labelled sub-regions strata, must enclosed within single bounding box. provide stratified example design \\(50\\) sites selected three counties state North Carolina, U.S.- Gates (\\(n = 20\\)), Northampton (\\(n = 30\\)), Hertford (\\(n = 10\\)). Load shape file Gates, Northampton Hertford regions. Define bounding box Gates, Northampton Hertford using spbal. Generate approximately regular \\(B = 2^8 \\times 3^5 = 256 \\times 243\\) Halton Frame Gates, Northampton Hertford regions. Use getSample() function get \\(10\\) points Hertford region.","code":"strata <- c(\"Gates\", \"Northampton\", \"Hertford\") n_strata <- c(\"Gates\" = 20, \"Northampton\" = 30, \"Hertford\" = 10) shp_subset <- shp_file[shp_file[[\"NAME\"]] %in% strata,] bb_strata <- spbal::BoundingBox(shapefile = shp_subset) set.seed(511) result9 <- spbal::HaltonFrame(shapefile = shp_subset,                               N = n_strata,                               J = c(8, 5),                               boundingbox = bb_strata,                               stratum = \"NAME\") Frame <- result9$hf.pts.shp n_samples <- 10 hertford_samp <- spbal::getSample(Frame,                                    n = n_samples,                                    strata = \"Hertford\",                                    stratum = \"NAME\") hertford_samp <- hertford_samp$sample hertford_samp[1:10, c(\"NAME\", \"spbalSeqID\", \"x\")] #> Simple feature collection with 10 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -77.16286 ymin: 36.23359 xmax: -76.78024 ymax: 36.55427 #> Geodetic CRS:  NAD27 #>         NAME spbalSeqID                          x #> 14  Hertford          1 POINT (-77.06721 36.33691) #> 31  Hertford          2 POINT (-77.13098 36.55427) #> 4   Hertford          3 POINT (-76.87589 36.23359) #> 51  Hertford          4 POINT (-77.00344 36.34227) #> 7   Hertford          5 POINT (-77.16286 36.26982) #> 82  Hertford          6  POINT (-76.90778 36.3785) #> 92  Hertford          7 POINT (-77.03532 36.48718) #> 101 Hertford          8 POINT (-76.78024 36.30605) #> 111 Hertford          9 POINT (-77.09909 36.41473) #> 13  Hertford         10 POINT (-76.97155 36.24567)"},{"path":"/articles/spbal.html","id":"panel-design-from-halton-frame","dir":"Articles","previous_headings":"spbal > Halton Frame (HF)","what":"Panel Design from Halton Frame","title":"spbal - Spatially Balanced Sampling","text":"Panel designs Halton Frames also possible spbal. following call sets last five elements panel \\(1\\) first five elements panel \\(2\\) last five elements panel \\(2\\) first five elements panel \\(3\\) (-lapping design \\(50\\) unique sites). panel spatially balanced sample size \\(n = 20\\), collection sites panels spatially balanced sample size \\(n = 50\\). Generate approximately regular \\(B = 2^8 \\times 3^5 = 256 \\times 243\\) Halton Frame Gates. Now obtain sites panel \\(1\\) using getPanel() function.","code":"set.seed(511) panels <- c(20, 20, 20) n_panel_overlap <- c(0, 5, 5) result10 <- spbal::HaltonFrame(shapefile = shp_gates,                                panels = panels,                                panel_overlap = n_panel_overlap,                                J = c(8, 5),                                boundingbox = bb) HaltonFramePanel <- result10$hf.pts.shp panelid <- 1 SitesPanel_1 <- spbal::getPanel(HaltonFramePanel, panelid) SitesPanel_1 <- SitesPanel_1$sample SitesPanel_1[1:10, c(\"x\", \"spbalSeqID\", \"panel_id\")] #> Simple feature collection with 10 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.86985 ymin: 36.33583 xmax: -76.53069 ymax: 36.55364 #> Geodetic CRS:  NAD27 #>                             x spbalSeqID panel_id #> 1  POINT (-76.80818 36.37982)          1        1 #> 2  POINT (-76.56152 36.46673)          2        1 #> 3  POINT (-76.86985 36.55364)          3        1 #> 5  POINT (-76.74652 36.38411)          4        1 #> 8  POINT (-76.65402 36.41308)          5        1 #> 9  POINT (-76.77735 36.49999)          6        1 #> 10 POINT (-76.53069 36.35514)          7        1 #> 11 POINT (-76.83901 36.44205)          8        1 #> 12 POINT (-76.59235 36.52896)          9        1 #> 16 POINT (-76.69256 36.33583)         10        1"},{"path":"/articles/spbal.html","id":"halton-iterative-partitioning-hip","dir":"Articles","previous_headings":"spbal","what":"Halton Iterative Partitioning (HIP)","title":"spbal - Spatially Balanced Sampling","text":"HIP draws spatially balanced samples -samples point resources partitioning resource boxes nested structure Halton boxes. spbal parameter iterations defines number boxes used HIP partition larger sample size less population size. iterations parameter also defines number units available HIP -sample, -sample contains one unit box HIP partition. Halton iterative partitioning (HIP) extends Basic acceptance sampling (BAS) point resources. partitions resource \\(B \\geq n\\) boxes nested structure BAS, different sizes. boxes uniquely numbered using random-start Halton sequence length \\(B\\). HIP sample obtained randomly drawing one point boxes numbered \\(1, 2, ..., n\\). HIP draws spatially balanced samples point resources partitioning resource \\(B = 2^{J_1} * 3^{J_2}\\) nested boxes.","code":""},{"path":"/articles/spbal.html","id":"spbalhip","dir":"Articles","previous_headings":"spbal > Halton Iterative Partitioning (HIP)","what":"spbal::HIP()","title":"spbal - Spatially Balanced Sampling","text":"spbal::HIP() function supports following input parameters: population population point pairs. n number points draw population. Default \\(20\\). iterations levels partitioning required. Default \\(7\\). minRadius specified, minimum distance, meters, allowed sample points. applied $overSample. panels list integers define size panel non-overlapping panels design. length list determines number panels required. sum integers panels parameter determine total number samples selected, n. default value panels NULL, indicates non-overlapping panel design wanted. panel_overlap list integers define overlap previous panel. used panels parameter NULL. default value panel_overlap NULL. length panel_overlap must equal length panels. first value always forced zero first panel never overlaps region. verbose boolean, want see output printed screen set TRUE. Helpful taking long time. default FALSE .e. informational messages displayed. HIP() function returns list containing five variables: Population original population. HaltonIndex Halton index point. Points spread equally across Halton indices. sample population sample. overSample overSample contains one point Halton box. contiguous sub-samples oversample spatially balanced, first \\(n\\) points identical sample. minRadius result variable contains sample created using minRadius parameter. minRadius parameter specified minRadius variable contain NULL.","code":""},{"path":"/articles/spbal.html","id":"spbalhip-code-example","dir":"Articles","previous_headings":"spbal > Halton Iterative Partitioning (HIP)","what":"spbal::HIP() code example","title":"spbal - Spatially Balanced Sampling","text":"following sample code used demonstrate use spbal::HIP() function. generating \\(20\\) points population \\(5,000\\) (random) points \\(7\\) levels partitioning (\\(4\\) first dimension \\(3\\) second) give \\(2^4\\) * \\(3^3\\) = \\(32 * 27\\), resulting \\(864\\) boxes. HIP -sample \\(432\\) sites (one site \\(432\\) boxes HIP partition). first \\(n\\) points HIPoverSample identical HIPsample.","code":"# set random seed base::set.seed(511)  # define HIP parameters. pop <- matrix(stats::runif(5000*2), nrow = 5000, ncol = 2) n <- 20 its <- 7  # Convert the population matrix to an sf point object. sf_points <- sf::st_as_sf(data.frame(pop), coords = c(\"X1\", \"X2\")) dim(sf::st_coordinates(sf_points)) #> [1] 5000    2 # generate HIP sample. result <- spbal::HIP(population = sf_points,                       n = n,                       iterations =  its)  # HaltonIndex HaltonIndex <- result$HaltonIndex # verify all spread equally, should be TRUE. (length(unique(table(HaltonIndex))) == 1) #> [1] TRUE # Population Sample HIPsample <- result$sample HIPsample #> Simple feature collection with 20 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 0.04282557 ymin: 0.05113006 xmax: 0.9548381 ymax: 0.9662592 #> CRS:           NA #> First 10 features: #>    HaltonIndex spbalSeqID                     geometry #> 1            0          1  POINT (0.9104533 0.1395789) #> 2            1          2  POINT (0.2864811 0.6609214) #> 3            2          3   POINT (0.590989 0.9033066) #> 4            3          4  POINT (0.1926398 0.2614476) #> 5            4          5  POINT (0.7768502 0.3905133) #> 6            5          6  POINT (0.4038541 0.8324469) #> 7            6          7 POINT (0.7109394 0.05113006) #> 8            7          8 POINT (0.08206315 0.4703658) #> 9            8          9  POINT (0.9548381 0.6773421) #> 10           9         10  POINT (0.3318416 0.1603996) HIPoverSample <- result$overSample HIPoverSample[1:10, c(\"geometry\", \"spbalSeqID\")] #> Simple feature collection with 10 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 0.08206315 ymin: 0.05113006 xmax: 0.9548381 ymax: 0.9033066 #> CRS:           NA #>                        geometry spbalSeqID #> 1   POINT (0.9104533 0.1395789)          1 #> 2   POINT (0.2864811 0.6609214)          2 #> 3    POINT (0.590989 0.9033066)          3 #> 4   POINT (0.1926398 0.2614476)          4 #> 5   POINT (0.7768502 0.3905133)          5 #> 6   POINT (0.4038541 0.8324469)          6 #> 7  POINT (0.7109394 0.05113006)          7 #> 8  POINT (0.08206315 0.4703658)          8 #> 9   POINT (0.9548381 0.6773421)          9 #> 10  POINT (0.3318416 0.1603996)         10 OverSampleSize <- dim(HIPoverSample)[1] OverSampleSize #> [1] 432 # compare the HIP sample and oversample, they will be the same. all.equal(HIPsample$geometry[1:n], HIPoverSample$geometry[1:n]) #> [1] TRUE"},{"path":"/articles/spbal.html","id":"forcing-a-minimum-distance-between-sites","dir":"Articles","previous_headings":"spbal > Halton Iterative Partitioning (HIP)","what":"Forcing a minimum distance between sites","title":"spbal - Spatially Balanced Sampling","text":"HIP selects spatially balanced samples, algorithm can choose sites closer together desired, mainly site density varies significantly study region. enforce minimum distance sites, spbal minimum distance sites parameter minRadius. Setting minRadius \\(= r > 0\\) draws ordered subset \\(S\\) HIP -sample, size \\(S\\) depends iterations minRadius parameters. Taking first \\(n \\leq |S|\\) sites \\(S\\) gives well-spread sample \\(n\\) sites satisfies minimum distance sites requirement.","code":""},{"path":"/articles/spbal.html","id":"hip-panel-design","dir":"Articles","previous_headings":"spbal > Halton Iterative Partitioning (HIP)","what":"HIP Panel Design","title":"spbal - Spatially Balanced Sampling","text":"HIP Panel designs also possible spbal. Use panels n_panel_overlap parameters demonstrated BAS HaltonFrame functions.","code":""},{"path":"/articles/spbal.html","id":"more-details","dir":"Articles","previous_headings":"spbal","what":"More Details","title":"spbal - Spatially Balanced Sampling","text":"following section provides details spbal package functions getSample getPanel. functions accept objects created spbal input via shapefile parameter.","code":""},{"path":"/articles/spbal.html","id":"getsample","dir":"Articles","previous_headings":"spbal > More Details","what":"getSample","title":"spbal - Spatially Balanced Sampling","text":"spbal getSample function can applied outputs produced spbal BAS HaltonFrame functions.","code":""},{"path":"/articles/spbal.html","id":"non-stratified-samples","dir":"Articles","previous_headings":"spbal > More Details > getSample","what":"Non-Stratified samples","title":"spbal - Spatially Balanced Sampling","text":"Let ‘shp’ output BAS HaltonFrame, getSample(shapefile = shp, n = n) output first \\(n\\) points \\(shp\\). getSample(shapefile = shp, n = n, randomStart = TRUE) output \\(n\\) points (order frame) random starting point \\(shp\\).","code":""},{"path":"/articles/spbal.html","id":"stratified-samples","dir":"Articles","previous_headings":"spbal > More Details > getSample","what":"Stratified samples","title":"spbal - Spatially Balanced Sampling","text":"case input stratified sample, \\(strata\\) \\(stratum\\) parameters must specified. specified \\(n\\) parameter need specified, , ignored. case getSample return points stratified sample. parameter \\(randomStart\\) supported dealing stratified samples. specified ignored. getSample(shapefile = shp, strata = strata, stratum = stratum) output points \\(shp\\) column name specified \\(stratum\\) parameter contains value specified \\(strata\\) parameter.","code":""},{"path":"/articles/spbal.html","id":"getpanel","dir":"Articles","previous_headings":"spbal > More Details","what":"getPanel","title":"spbal - Spatially Balanced Sampling","text":"spbal getPanel function can applied outputs produced spbal BAS HaltonFrame functions. Let ‘shp’ output BAS HaltonFrame, getPanel(shapefile = shp, panelid = panelid) output points belonging panel \\(panelid\\) \\(shp\\). Use R help function information functions.","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Phil Davies. Author, maintainer. Blair Robertson. Author. Paul van Dam-Bates. Author. Oliver Gansell. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Davies P, Robertson B, van Dam-Bates P, Gansell O (2024). spbal: Spatially Balanced Sampling Algorithms. R package version 1.0.0.","code":"@Manual{,   title = {spbal: Spatially Balanced Sampling Algorithms},   author = {Phil Davies and Blair Robertson and Paul {van Dam-Bates} and Oliver Gansell},   year = {2024},   note = {R package version 1.0.0}, }"},{"path":"/reference/BAS.html","id":null,"dir":"Reference","previous_headings":"","what":"Balanced Acceptance Sampling (BAS). — BAS","title":"Balanced Acceptance Sampling (BAS). — BAS","text":"BAS draws spatially balanced samples areal resources. draw BAS samples, spbal requires study region shapefile region’s bounding box. initial sample size also needed, can easily increased decreased within spbal master sampling applications","code":""},{"path":"/reference/BAS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balanced Acceptance Sampling (BAS). — BAS","text":"","code":"BAS(   shapefile = NULL,   n = 100,   boundingbox = NULL,   minRadius = NULL,   panels = NULL,   panel_overlap = NULL,   stratum = NULL,   seeds = NULL,   verbose = FALSE )"},{"path":"/reference/BAS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balanced Acceptance Sampling (BAS). — BAS","text":"shapefile Shape file polygon (sp sf) select sites . n Number sites select. using stratification named vector containing sample sizes group. boundingbox Bounding box around study area. bounding box supplied spbal generate bounding box shapefile. minRadius specified, minimum distance, meters, allowed sample points. applied $sample points. Points meet minRadius criteria retuned minRadius output variable. panels list integers define size panel non-overlapping panels design. length list determines number panels required. sum integers panels parameter determine total number samples selected, n. default value panels NULL, indicates non-overlapping panel design wanted. panel_overlap list integers define overlap previous panel. used panels parameter NULL. default value panel_overlap NULL. length panel_overlap must equal length panels. first value always forced zero first panel never overlaps region. stratum name column data.frame attached shapefile defines strata interest. seeds vector 2 seeds, u1 u2. specified, default NULL defined randomly using function generateUVector. verbose Boolean want see output printed screen. Helpful taking long time. Default FALSE .e. informational messages displayed.","code":""},{"path":"/reference/BAS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balanced Acceptance Sampling (BAS). — BAS","text":"list containing three variables, $sample containing locations BAS sample, BAS order, $seeds, u1 u2 seeds used generate sample $minRadius containing points $sample meet minRadius criteria. minRadius parameter NULL $minRadius returned also NULL. sample points returned form simple feature collection POINT objects. following attributes: SiteID unique identifier every sample point. encodes BAS order. spbalSeqID unique identifier every sample point. encodes BAS sample order. geometry XY co-ordinates sample point CRS original shapefile.","code":""},{"path":"/reference/BAS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Balanced Acceptance Sampling (BAS). — BAS","text":"function first written Paul van Dam-Bates package BASMasterSample later simplified Phil Davies.","code":""},{"path":"/reference/BAS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Balanced Acceptance Sampling (BAS). — BAS","text":"","code":"# Equal probability BAS sample ----------------------------------------------  # Use the North Carolina shapefile supplied in the sf R package. shp_file <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\")) #> Reading layer `nc' from data source  #>   `/home/phil/R/x86_64-pc-linux-gnu-library/4.3/sf/shape/nc.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 shp_gates <- shp_file[shp_file$NAME == \"Gates\",]  # Vertically aligned master sample bounding box. bb <- spbal::BoundingBox(shapefile = shp_gates)  set.seed(511) n_samples <- 20 # Equal probability BAS sample. result <- spbal::BAS(shapefile = shp_gates,                      n = n_samples,                      boundingbox = bb) BAS20 <- result$sample # display first three sample points. BAS20[1:3,] #> Simple feature collection with 3 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.88599 ymin: 36.35425 xmax: -76.63932 ymax: 36.4991 #> Geodetic CRS:  NAD27 #>   SiteID spbalSeqID                   geometry #> 1      1          1 POINT (-76.88599 36.41219) #> 2      2          2  POINT (-76.63932 36.4991) #> 3      3          3 POINT (-76.76266 36.35425)  # Increase the BAS sample size ---------------------------------------------- n_samples <- 50 result2 <- spbal::BAS(shapefile = shp_gates,                       n = n_samples,                       boundingbox = bb,                       seeds = result$seed) BAS50 <- result2$sample BAS50[1:3,] #> Simple feature collection with 3 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.88599 ymin: 36.35425 xmax: -76.63932 ymax: 36.4991 #> Geodetic CRS:  NAD27 #>   SiteID spbalSeqID                   geometry #> 1      1          1 POINT (-76.88599 36.41219) #> 2      2          2  POINT (-76.63932 36.4991) #> 3      3          3 POINT (-76.76266 36.35425)  # Check, first n_samples points in both samples must be the same. all.equal(BAS20$geometry, BAS50$geometry[1:20]) #> [1] TRUE"},{"path":"/reference/BoundingBox.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a bounding box for a study region. — BoundingBox","title":"Create a bounding box for a study region. — BoundingBox","text":"Randomly generate seed 10,000 possible values right now 2 dimensions. Note van Dam-Bates et al. (2018) required random seed falls main object shape, one islands New Zealand, within marine environment BC west coast. However, random rotation, able ignore detail. function used without random rotation, recommend running first master sample point indeed fall within largest scale master sample use.","code":""},{"path":"/reference/BoundingBox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bounding box for a study region. — BoundingBox","text":"","code":"BoundingBox(shapefile, d = 2, rotate = FALSE, verbose = FALSE)"},{"path":"/reference/BoundingBox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bounding box for a study region. — BoundingBox","text":"shapefile Spatial feature defines boundary area define bounding box . d Dimension new Master Sample, stage work d=2. rotate Boolean whether randomly rotate bounding box. parameter supported time. verbose Print rotation random seed generated.","code":""},{"path":"/reference/BoundingBox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bounding box for a study region. — BoundingBox","text":"bounding box study area.","code":""},{"path":"/reference/BoundingBox.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a bounding box for a study region. — BoundingBox","text":"function first written Paul van Dam-Bates package BASMasterSample later ported package, spbal.","code":""},{"path":"/reference/BoundingBox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bounding box for a study region. — BoundingBox","text":"","code":"# Create a bounding box for the Gates, North Carolina study area ------------- # Use the North Carolina shapefile supplied in the sf R package. shp_file <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\")) #> Reading layer `nc' from data source  #>   `/home/phil/R/x86_64-pc-linux-gnu-library/4.3/sf/shape/nc.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 shp_gates <- shp_file[shp_file$NAME == \"Gates\",] # Vertically aligned master sample bounding box. bb <- spbal::BoundingBox(shapefile = shp_gates) bb #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -76.95367 ymin: 36.29452 xmax: -76.46035 ymax: 36.55525 #> Geodetic CRS:  NAD27 #> POLYGON ((-76.95367 36.29452, -76.46035 36.2945..."},{"path":"/reference/HIP.html","id":null,"dir":"Reference","previous_headings":"","what":"Halton Iterative Partitioning (HIP). — HIP","title":"Halton Iterative Partitioning (HIP). — HIP","text":"HIP draws spatially balanced samples -samples point resources partitioning resource boxes nested structure Halton boxes. spbal parameter iterations defines number boxes used HIP partition larger sample size less population size. iterations parameter also defines number units available HIP -sample, -sample contains one unit box HIP partition.","code":""},{"path":"/reference/HIP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Halton Iterative Partitioning (HIP). — HIP","text":"","code":"HIP(   population = NULL,   n = 20,   iterations = 7,   minRadius = NULL,   panels = NULL,   panel_overlap = NULL,   verbose = FALSE )"},{"path":"/reference/HIP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Halton Iterative Partitioning (HIP). — HIP","text":"population population point pairs. n number points draw population. Default 20. iterations levels partitioning required. Default 7. minRadius specified, minimum distance, meters, allowed sample points. applied $overSample. panels list integers define size panel non-overlapping panels design. length list determines number panels required. sum integers panels parameter determine total number samples selected, n. default value panels NULL, indicates non-overlapping panel design wanted. panel_overlap list integers define overlap previous panel. used panels parameter NULL. default value panel_overlap NULL. length panel_overlap must equal length panels. first value always forced zero first panel never overlaps region. verbose Boolean want see output printed screen. Helpful taking long time. Default FALSE .e. informational messages displayed.","code":""},{"path":"/reference/HIP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Halton Iterative Partitioning (HIP). — HIP","text":"Return list containing following five variables: Population Original population point pairs sf object. HaltonIndex Halton index point. Points spread equally across Halton indices. sample sample population size n. overSample overSample contains one point Halton box. contiguous sub-samples oversample spatially balanced, first n points identical sample. minRadius result variable contains sample created using minRadius parameter. minRadius parameter specified minRadius variable contain NULL.","code":""},{"path":"/reference/HIP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Halton Iterative Partitioning (HIP). — HIP","text":"Halton iterative partitioning (HIP) extends Basic acceptance sampling (BAS) point resources. partitions resource $B >= n$ boxes nested structure BAS, different sizes. boxes uniquely numbered using random-start Halton sequence length $B$. HIP sample obtained randomly drawing one point boxes numbered $1, 2, . . . , n$.","code":""},{"path":"/reference/HIP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Halton Iterative Partitioning (HIP). — HIP","text":"Phil Davies, Blair Robertson.","code":""},{"path":"/reference/HIP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Halton Iterative Partitioning (HIP). — HIP","text":"","code":"# generating 20 points from a population of 5,000 (random) points with 7 # levels of partitioning (4 in the first dimension and 3 in the second) to # give (2^4) * (3^3) = 32 * 27, resulting in 864 boxes ----------------------  # set random seed set.seed(511)  # define HIP parameters. pop <- matrix(runif(5000*2), nrow = 5000, ncol = 2) n <- 20 its <- 7  # Convert the population matrix to an sf point object. sf_points <- sf::st_as_sf(data.frame(pop), coords = c(\"X1\", \"X2\")) dim(sf::st_coordinates(sf_points)) #> [1] 5000    2  # generate HIP sample. result <- spbal::HIP(population = sf_points,                      n = n,                      iterations =  its)  # HaltonIndex HaltonIndex <- result$HaltonIndex table(HaltonIndex) #> HaltonIndex #>   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #>  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #>  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #>  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #>  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419  #>  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  11  #> 420 421 422 423 424 425 426 427 428 429 430 431  #>  11  11  11  11  11  11  11  11  11  11  11  11   # Population Sample HIPsample <- result$sample HIPsample #> Simple feature collection with 20 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 0.04282557 ymin: 0.05113006 xmax: 0.9548381 ymax: 0.9662592 #> CRS:           NA #> First 10 features: #>    HaltonIndex spbalSeqID                     geometry #> 1            0          1  POINT (0.9104533 0.1395789) #> 2            1          2  POINT (0.2864811 0.6609214) #> 3            2          3   POINT (0.590989 0.9033066) #> 4            3          4  POINT (0.1926398 0.2614476) #> 5            4          5  POINT (0.7768502 0.3905133) #> 6            5          6  POINT (0.4038541 0.8324469) #> 7            6          7 POINT (0.7109394 0.05113006) #> 8            7          8 POINT (0.08206315 0.4703658) #> 9            8          9  POINT (0.9548381 0.6773421) #> 10           9         10  POINT (0.3318416 0.1603996)"},{"path":"/reference/HaltonFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Halton Frame. — HaltonFrame","title":"Create a Halton Frame. — HaltonFrame","text":"Halton frames discretize areal resource spatially ordered grid, samples consecutive frame points spatially balanced. generate Halton Frames, spbal requires study region shapefile region’s bounding box.","code":""},{"path":"/reference/HaltonFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Halton Frame. — HaltonFrame","text":"","code":"HaltonFrame(   N = 1,   J = base::c(3, 2),   bases = base::c(2, 3),   boundingbox = NULL,   shapefile = NULL,   panels = NULL,   panel_overlap = NULL,   seeds = NULL,   stratum = NULL,   verbose = FALSE )"},{"path":"/reference/HaltonFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Halton Frame. — HaltonFrame","text":"N number points frame generate. J number grid cells. list 2 values. default value c(3, 2). bases Co-prime base Halton Sequence. default value c(2, 3). boundingbox Bounding box around study area. bounding box supplied spbal generate bounding box shapefile. shapefile sf object. shapefile parameter NULL function HaltonFrameBase called directly. panels list integers define size panel non-overlapping panels design. length list determines number panels required. sum integers panels parameter determine total number samples selected, n. default value panels NULL, indicates non-overlapping panel design wanted. panel_overlap list integers define overlap previous panel. used panels parameter NULL. default value panel_overlap NULL. length panel_overlap must equal length panels. first value always forced zero first panel never overlaps region. seeds vector 2 seeds, u1 u2. specified, default NULL. stratum Name column shapefile makes strata. verbose Boolean want see output printed screen. Helpful taking long time. Default FALSE .e. informational messages displayed.","code":""},{"path":"/reference/HaltonFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Halton Frame. — HaltonFrame","text":"Returns list containing five variables: J number grid cells. list 2 values used generate Halton grid frame. hg.pts.shp Halton grid bounding box study area. hf.pts.shp Halton frame, sample points within study area. bb bounding box. seeds u1 u2 seeds used generate sample. sample points hf.pts.shp returned form simple feature collection POINT objects. well features original shapefile, following new attributes added: spbalSeqID: unique identifier every sample point. ID: unique identifier, Halton frame point order.","code":""},{"path":"/reference/HaltonFrame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a Halton Frame. — HaltonFrame","text":"Phil Davies.","code":""},{"path":"/reference/HaltonFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Halton Frame. — HaltonFrame","text":"","code":"# we discretize the Gates study region into a coarse grid using # B = 2^{J_1} * 3^{J_2}= (2^3) * (3^2) (9 by 8 grid) ------------------------  # Use the North Carolina shapefile supplied in the sf R package. shp_file <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\")) #> Reading layer `nc' from data source  #>   `/home/phil/R/x86_64-pc-linux-gnu-library/4.3/sf/shape/nc.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 shp_gates <- shp_file[shp_file$NAME == \"Gates\",]  # Vertically aligned master sample bounding box. bb <- spbal::BoundingBox(shapefile = shp_gates)  set.seed(511) result6 <- spbal::HaltonFrame(shapefile = shp_gates,                               J = c(3, 2),                               boundingbox = bb) # get the frame points. Frame <- result6$hf.pts.shp Frame #> Simple feature collection with 52 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.92284 ymin: 36.309 xmax: -76.49118 ymax: 36.54077 #> Geodetic CRS:  NAD27 #> First 10 features: #>    ID spbalSeqID                          x #> 1   1          1  POINT (-76.67618 36.5118) #> 2   2          2 POINT (-76.79951 36.36694) #> 3   3          3 POINT (-76.55285 36.45386) #> 4   4          4 POINT (-76.86118 36.54077) #> 6   6          5 POINT (-76.73784 36.39591) #> 9   9          6 POINT (-76.67618 36.42488) #> 10 10          7  POINT (-76.79951 36.5118) #> 11 11          8 POINT (-76.55285 36.36694) #> 12 12          9 POINT (-76.86118 36.45386) #> 13 13         10 POINT (-76.61451 36.54077) # get the grid points. Grid <- result6$hg.pts.shp Grid #> Simple feature collection with 72 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.92284 ymin: 36.309 xmax: -76.49118 ymax: 36.54077 #> Geodetic CRS:  NAD27 #> First 10 features: #>                             x ID #> 1   POINT (-76.67618 36.5118)  1 #> 2  POINT (-76.79951 36.36694)  2 #> 3  POINT (-76.55285 36.45386)  3 #> 4  POINT (-76.86118 36.54077)  4 #> 5    POINT (-76.61451 36.309)  5 #> 6  POINT (-76.73784 36.39591)  6 #> 7  POINT (-76.49118 36.48283)  7 #> 8  POINT (-76.92284 36.33797)  8 #> 9  POINT (-76.67618 36.42488)  9 #> 10  POINT (-76.79951 36.5118) 10"},{"path":"/reference/HaltonFrameBase.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Halton Frame. — HaltonFrameBase","title":"Generate a Halton Frame. — HaltonFrameBase","text":"description useful function.","code":""},{"path":"/reference/HaltonFrameBase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Halton Frame. — HaltonFrameBase","text":"","code":"HaltonFrameBase(   n = (bases[1]^J[1]) * (bases[2]^J[2]),   J = base::c(3, 2),   bases = base::c(2, 3),   seeds = NULL )"},{"path":"/reference/HaltonFrameBase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Halton Frame. — HaltonFrameBase","text":"n number points frame generate. J number grid cells. list 2 values. default value c(3, 2), also use c(5, 3). bases Co-prime base Halton Sequence. default value c(2, 3). seeds u1 u2 seeds use.","code":""},{"path":"/reference/HaltonFrameBase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Halton Frame. — HaltonFrameBase","text":"list containing following four variables: halton_seq - halton_seq_div - Z - halton_frame -","code":""},{"path":"/reference/HaltonFrameBase.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Halton Frame. — HaltonFrameBase","text":"function written Phil Davies.","code":""},{"path":"/reference/PanelDesignAssignPanelids.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign panel ids to the samples. — PanelDesignAssignPanelids","title":"Assign panel ids to the samples. — PanelDesignAssignPanelids","text":"function assigns panel id's sample based values panels panel_overlap parameters. internal function.","code":""},{"path":"/reference/PanelDesignAssignPanelids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign panel ids to the samples. — PanelDesignAssignPanelids","text":"","code":"PanelDesignAssignPanelids(   smp,   panels,   panel_overlap,   panel_design,   number_panels,   verbose = FALSE )"},{"path":"/reference/PanelDesignAssignPanelids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign panel ids to the samples. — PanelDesignAssignPanelids","text":"smp shapefile region study. panels list integers defines size panel non-overlapping panels design. length list determines number panels required. sum integers panels parameter determine total number samples selected, n. default value panels NULL, indicates non-overlapping panel design wanted. panel_overlap list integers define overlap previous panel. used panels parameter NULL. default value panel_overlap NULL. length panel_overlap must equal length panels. first value always forced zero first panel never overlaps region. panel_design flag, TRUE, indicates performing panel design parameters used specified panels panel_overlap parameters. number_panels number sample panels required. verbose Boolean, set TRUE want see output messaged screen. Default FALSE .e. informational messages displayed.","code":""},{"path":"/reference/PanelDesignAssignPanelids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign panel ids to the samples. — PanelDesignAssignPanelids","text":"Returns list following variables: sample sample original shapefile appropriate panel id's add feature. panel id values determined panels panel_overlap parameters.","code":""},{"path":"/reference/PanelDesignAssignPanelids.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assign panel ids to the samples. — PanelDesignAssignPanelids","text":"Phil Davies.","code":""},{"path":"/reference/SRS.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple random sampling. — SRS","title":"Simple random sampling. — SRS","text":"function invokes base::sample() draw random sample using user specified random seed.","code":""},{"path":"/reference/SRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple random sampling. — SRS","text":"","code":"SRS(seed = 511, total_rows = 0, sample_size = 0)"},{"path":"/reference/SRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple random sampling. — SRS","text":"seed random seed used draw current sample. total_rows total number rows input dataset. sample_size number rows wanted random sample.","code":""},{"path":"/reference/SRS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple random sampling. — SRS","text":"random sample.","code":""},{"path":"/reference/SRS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple random sampling. — SRS","text":"function written Phil Davies.","code":""},{"path":"/reference/SRS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple random sampling. — SRS","text":"","code":"# Create a random sample with a seed of 99 ---------------------------------- spbal::SRS(seed = 99, total_rows = 100, sample_size = 20) #>  [1] 48 33 44 22 62 32 13 20 31 68  9 82 88 30 86 84 95 14  4 78  # Create a random sample with a seed of 42 ---------------------------------- spbal::SRS(seed = 42, total_rows = 100, sample_size = 20) #>  [1]  49  65  25  74  18 100  47  24  71  89  37  20  26   3  41  27  36   5  34 #> [20]  87  # Create a random sample with a seed of 99 ---------------------------------- spbal::SRS(seed = 99, total_rows = 100, sample_size = 25) #>  [1] 48 33 44 22 62 32 13 20 31 68  9 82 88 30 86 84 95 14  4 78  7 71 38 85 58"},{"path":"/reference/ValidatePanelDesign.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the panels and panel_overlap parameters. — ValidatePanelDesign","title":"Validate the panels and panel_overlap parameters. — ValidatePanelDesign","text":"function used validate panels panel_overlap parameters. panel_design flag set TRUE panels /panel_overlap parameters NULL. internal function.","code":""},{"path":"/reference/ValidatePanelDesign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the panels and panel_overlap parameters. — ValidatePanelDesign","text":"","code":"ValidatePanelDesign(panels, panel_overlap, n)"},{"path":"/reference/ValidatePanelDesign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the panels and panel_overlap parameters. — ValidatePanelDesign","text":"panels list integers define size panel non-overlapping panels design. length list determines number panels required. sum integers panels parameter determine total number samples selected, n. default value panels NULL, indicates non-overlapping panel design wanted. panel_overlap list integers define overlap previous panel. used panels parameter NULL. default value panel_overlap NULL. length panel_overlap must equal length panels. first value always forced zero first panel never overlaps region. n number samples required. used panels panel_overlap NULL.","code":""},{"path":"/reference/ValidatePanelDesign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the panels and panel_overlap parameters. — ValidatePanelDesign","text":"list containing four variables, detailed . n panels parameter null, n parameter set using sum panel sizes panels. panel_design boolean, TRUE, indicates user wants panels design. number_panels number panels specified panel design. panel_overlap Updated panel_overlap vector, first element always forced zero irrespective user specified.","code":""},{"path":"/reference/ValidatePanelDesign.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Validate the panels and panel_overlap parameters. — ValidatePanelDesign","text":"Phil Davies.","code":""},{"path":"/reference/contains_feature.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the sf object contains a specified feature. — contains_feature","title":"Check if the sf object contains a specified feature. — contains_feature","text":"Used check simple file object contains feature. internal function.","code":""},{"path":"/reference/contains_feature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the sf object contains a specified feature. — contains_feature","text":"","code":"contains_feature(sf_object, feature_name)"},{"path":"/reference/contains_feature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the sf object contains a specified feature. — contains_feature","text":"sf_object Simple file object want verify contains feature called feature_name. feature_name feature name want find simple file object sf_object.","code":""},{"path":"/reference/contains_feature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the sf object contains a specified feature. — contains_feature","text":"Returns TRUE simple file object sf_object contains feature feature_name. Otherwise FALSE returned.","code":""},{"path":"/reference/contains_feature.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if the sf object contains a specified feature. — contains_feature","text":"Phil Davies.","code":""},{"path":"/reference/cppBASpts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate numbers from a Halton Sequence. — cppBASpts","title":"Generate numbers from a Halton Sequence. — cppBASpts","text":"efficiency, function can generate points along random start Halton Sequence predefined Halton.","code":""},{"path":"/reference/cppBASpts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate numbers from a Halton Sequence. — cppBASpts","text":"","code":"cppBASpts(   n = 10L,   seeds = as.integer(c()),   bases = as.numeric(c()),   verbose = FALSE )"},{"path":"/reference/cppBASpts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate numbers from a Halton Sequence. — cppBASpts","text":"n Number points required. seeds Random starting point dimension. bases Co-prime base Halton Sequence. verbose boolean indicating whether informational messages issued.","code":""},{"path":"/reference/cppBASpts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate numbers from a Halton Sequence. — cppBASpts","text":"Matrix columns, order points, x [0,1) y [0,1)","code":""},{"path":"/reference/cppBASpts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate numbers from a Halton Sequence. — cppBASpts","text":"function first written R Blair Robertson, subsequently re-written C/C++ Phil Davies.","code":""},{"path":"/reference/cppBASpts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate numbers from a Halton Sequence. — cppBASpts","text":"","code":"# First 10 points in the Halton Sequence for base 2,3 spbal::cppBASpts(n = 10) #> $pts #>         [,1]       [,2] #>  [1,] 0.0000 0.00000000 #>  [2,] 0.5000 0.33333333 #>  [3,] 0.2500 0.66666667 #>  [4,] 0.7500 0.11111111 #>  [5,] 0.1250 0.44444444 #>  [6,] 0.6250 0.77777778 #>  [7,] 0.3750 0.22222222 #>  [8,] 0.8750 0.55555556 #>  [9,] 0.0625 0.88888889 #> [10,] 0.5625 0.03703704 #>  #> $xklist #> $xklist[[1]] #> [1] 0.0 0.5 #>  #> $xklist[[2]] #> [1] 0.0000000 0.3333333 0.6666667 #>  #>  #> $seeds #> [1] 0 0 #>  # First 10 points in the Halton Sequence for base 2,3 with # starting point at the 15th and 22nd index. spbal::cppBASpts(n = 10, seeds = c(14, 21)) #> $pts #>          [,1]       [,2] #>  [1,] 0.43750 0.18518519 #>  [2,] 0.93750 0.51851852 #>  [3,] 0.03125 0.85185185 #>  [4,] 0.53125 0.29629630 #>  [5,] 0.28125 0.62962963 #>  [6,] 0.78125 0.96296296 #>  [7,] 0.15625 0.01234568 #>  [8,] 0.65625 0.34567901 #>  [9,] 0.40625 0.67901235 #> [10,] 0.90625 0.12345679 #>  #> $xklist #> $xklist[[1]] #> [1] 0.0 0.5 #>  #> $xklist[[2]] #> [1] 0.0000000 0.3333333 0.6666667 #>  #>  #> $seeds #> [1] 14 21 #>"},{"path":"/reference/cppBASptsIndexed.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate numbers from a Halton Sequence along a specified set of indices. — cppBASptsIndexed","title":"Generate numbers from a Halton Sequence along a specified set of indices. — cppBASptsIndexed","text":"efficiency, function can generate points along random start Halton Sequence predefined set indices away seed. boxes provided calculate Halton Sequence boxes along entire sequence.","code":""},{"path":"/reference/cppBASptsIndexed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate numbers from a Halton Sequence along a specified set of indices. — cppBASptsIndexed","text":"","code":"cppBASptsIndexed(   n = 10L,   seeds = as.integer(c()),   bases = as.numeric(c()),   boxes = as.integer(c()),   verbose = FALSE )"},{"path":"/reference/cppBASptsIndexed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate numbers from a Halton Sequence along a specified set of indices. — cppBASptsIndexed","text":"n Number points required. seeds Random starting point dimension. bases Co-prime base Halton Sequence. boxes Integer vector indices sample along Halton sequence (default 1:n). verbose boolean indicating whether informational messages issued.","code":""},{"path":"/reference/cppBASptsIndexed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate numbers from a Halton Sequence along a specified set of indices. — cppBASptsIndexed","text":"Matrix columns, order points, x [0,1) y [0,1)","code":""},{"path":"/reference/cppBASptsIndexed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate numbers from a Halton Sequence along a specified set of indices. — cppBASptsIndexed","text":"points along Halton sequence required, function efficiently generates points needed along sequence. Taking points random seed equates boxes = 1:n. However, taking advantage Halton Sequence repeats B = prod(base^J), $J$ integer. can also select every Bth box efficiently generate values specific locations along sequence. reduces future computation bounding boxes large comparison polygon sampled.","code":""},{"path":"/reference/cppBASptsIndexed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate numbers from a Halton Sequence along a specified set of indices. — cppBASptsIndexed","text":"Phil Davies, Paul van Dam-Bates, Blair Robertson.","code":""},{"path":"/reference/cppBASptsIndexed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate numbers from a Halton Sequence along a specified set of indices. — cppBASptsIndexed","text":"","code":"# First 10 points in the Halton Sequence for base 2,3 spbal::cppBASptsIndexed(n = 10) #> $pts #>         [,1]       [,2] #>  [1,] 0.0000 0.00000000 #>  [2,] 0.5000 0.33333333 #>  [3,] 0.2500 0.66666667 #>  [4,] 0.7500 0.11111111 #>  [5,] 0.1250 0.44444444 #>  [6,] 0.6250 0.77777778 #>  [7,] 0.3750 0.22222222 #>  [8,] 0.8750 0.55555556 #>  [9,] 0.0625 0.88888889 #> [10,] 0.5625 0.03703704 #>  #> $xklist #> $xklist[[1]] #> [1] 0.0 0.5 #>  #> $xklist[[2]] #> [1] 0.0000000 0.3333333 0.6666667 #>  #>  #> $seeds #> [1] 0 0 #>  # First 10 points in the Halton Sequence for base 2,3 with # starting point at the 15th and 22nd index. spbal::cppBASptsIndexed(n = 10, seeds = c(14, 21)) #> $pts #>          [,1]       [,2] #>  [1,] 0.43750 0.18518519 #>  [2,] 0.93750 0.51851852 #>  [3,] 0.03125 0.85185185 #>  [4,] 0.53125 0.29629630 #>  [5,] 0.28125 0.62962963 #>  [6,] 0.78125 0.96296296 #>  [7,] 0.15625 0.01234568 #>  [8,] 0.65625 0.34567901 #>  [9,] 0.40625 0.67901235 #> [10,] 0.90625 0.12345679 #>  #> $xklist #> $xklist[[1]] #> [1] 0.0 0.5 #>  #> $xklist[[2]] #> [1] 0.0000000 0.3333333 0.6666667 #>  #>  #> $seeds #> [1] 14 21 #>"},{"path":"/reference/cppRSHalton_br.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate numbers from a Halton Sequence with a random start — cppRSHalton_br","title":"Generate numbers from a Halton Sequence with a random start — cppRSHalton_br","text":"efficiency, function can generate points along random start Halton Sequence predefined Halton.","code":""},{"path":"/reference/cppRSHalton_br.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate numbers from a Halton Sequence with a random start — cppRSHalton_br","text":"","code":"cppRSHalton_br(   n = 10L,   bases = as.numeric(c()),   seeds = as.numeric(c()),   verbose = FALSE )"},{"path":"/reference/cppRSHalton_br.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate numbers from a Halton Sequence with a random start — cppRSHalton_br","text":"n Number points required bases Co-prime base Halton Sequence seeds Random starting point dimension verbose boolean indicating whether informational messages issued.","code":""},{"path":"/reference/cppRSHalton_br.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate numbers from a Halton Sequence with a random start — cppRSHalton_br","text":"Matrix columns, order point, x [0,1) y [0,1).","code":""},{"path":"/reference/cppRSHalton_br.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate numbers from a Halton Sequence with a random start — cppRSHalton_br","text":"function first written R Blair Robertson, subsequently written C/C++ Phil Davies.","code":""},{"path":"/reference/cppRSHalton_br.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate numbers from a Halton Sequence with a random start — cppRSHalton_br","text":"","code":"# First 10 points in the Halton Sequence for base 2,3  spbal::cppRSHalton_br(n = 10) #> $pts #>         [,1]       [,2] #>  [1,] 0.0000 0.00000000 #>  [2,] 0.5000 0.33333333 #>  [3,] 0.2500 0.66666667 #>  [4,] 0.7500 0.11111111 #>  [5,] 0.1250 0.44444444 #>  [6,] 0.6250 0.77777778 #>  [7,] 0.3750 0.22222222 #>  [8,] 0.8750 0.55555556 #>  [9,] 0.0625 0.88888889 #> [10,] 0.5625 0.03703704 #>  #> $xklist #> $xklist[[1]] #> [1] 0.0 0.5 #>  #> $xklist[[2]] #> [1] 0.0000000 0.3333333 0.6666667 #>  #>  #> $seeds #> [1] 0 0 #>  # First 10 points in the Halton Sequence for base 2,3 with # starting point at the 15th and 22nd index.  spbal::cppRSHalton_br(n = 10, seeds = c(14, 21)) #> $pts #>          [,1]       [,2] #>  [1,] 0.43750 0.18518519 #>  [2,] 0.93750 0.51851852 #>  [3,] 0.03125 0.85185185 #>  [4,] 0.53125 0.29629630 #>  [5,] 0.28125 0.62962963 #>  [6,] 0.78125 0.96296296 #>  [7,] 0.15625 0.01234568 #>  [8,] 0.65625 0.34567901 #>  [9,] 0.40625 0.67901235 #> [10,] 0.90625 0.12345679 #>  #> $xklist #> $xklist[[1]] #> [1] 0.0 0.5 #>  #> $xklist[[2]] #> [1] 0.0000000 0.3333333 0.6666667 #>  #>  #> $seeds #> [1] 14 21 #>"},{"path":"/reference/filterOnDistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter sample using a minimum distance. — filterOnDistance","title":"Filter sample using a minimum distance. — filterOnDistance","text":"input parameter minRadius >= 0 minimum distance two points sample. idea apply condition points -sample, result$overSample. call points x1, x2, ..., xB. Create new set S = (x1). Starting x1, check dist(S,x2) > minRadius. , add x2 S. x3, check dist(S,x3) > minRadius, dist smallest distance point S x3 (single linkage distance). dist(S,x3) > minRadius, add x3 S. Continue reach xB. distances calculated great circles oblate spheroid units meters.","code":""},{"path":"/reference/filterOnDistance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter sample using a minimum distance. — filterOnDistance","text":"","code":"filterOnDistance(overSample, minRadius)"},{"path":"/reference/filterOnDistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter sample using a minimum distance. — filterOnDistance","text":"overSample HIP sample. minRadius minimum distance two points sample.","code":""},{"path":"/reference/filterOnDistance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter sample using a minimum distance. — filterOnDistance","text":"S set points minRadius .","code":""},{"path":"/reference/filterOnDistance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter sample using a minimum distance. — filterOnDistance","text":"Key points: result$minRadius nonempty (always contains x1). Hence, user chooses crazy minRadius, get one point. result$minRadius subset result$overSample. number points result$minRadius random. fine! want n points result$minRadius less n, bad! can reduce minRadius /increase iterations parameter. want sample minimum radius property, use: smp <- result$minRadius sample <- smp[1:n,]","code":""},{"path":"/reference/filterOnDistance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter sample using a minimum distance. — filterOnDistance","text":"Phil Davies.","code":""},{"path":"/reference/findFirstStudyRegionPoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a randomly chosen Halton point from within the study area and the associated seeds. — findFirstStudyRegionPoint","title":"Get a randomly chosen Halton point from within the study area and the associated seeds. — findFirstStudyRegionPoint","text":"function repeatedly calls function spbal::getBASSample generate Halton frame sample. function selects first point random points study area. point seeds used generate sample returned caller.","code":""},{"path":"/reference/findFirstStudyRegionPoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a randomly chosen Halton point from within the study area and the associated seeds. — findFirstStudyRegionPoint","text":"","code":"findFirstStudyRegionPoint(shapefile, bb, seeds, verbose = FALSE)"},{"path":"/reference/findFirstStudyRegionPoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a randomly chosen Halton point from within the study area and the associated seeds. — findFirstStudyRegionPoint","text":"shapefile Shape file polygon (sp sf) study area(s). bb Bounding box defines Master Sample. bounding box must supplied. seeds vector 2 seeds, u1 u2. specified, default NULL defined randomly using function generateUVector. verbose Boolean want see output printed screen. Helpful taking long time. Default FALSE .e. informational messages displayed.","code":""},{"path":"/reference/findFirstStudyRegionPoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a randomly chosen Halton point from within the study area and the associated seeds. — findFirstStudyRegionPoint","text":"list containing three variables: seeds u1 u2 seeds used generate first point. k index first point initial sample.","code":""},{"path":"/reference/findFirstStudyRegionPoint.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get a randomly chosen Halton point from within the study area and the associated seeds. — findFirstStudyRegionPoint","text":"function written Phil Davies.","code":""},{"path":"/reference/generateUVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a vector of two random seeds. — generateUVector","title":"Generate a vector of two random seeds. — generateUVector","text":"function generates two seeds, u1 u2, range 0 2^11 0 3^7 respectively. returned caller form vector. internal use .","code":""},{"path":"/reference/generateUVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a vector of two random seeds. — generateUVector","text":"","code":"generateUVector()"},{"path":"/reference/generateUVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a vector of two random seeds. — generateUVector","text":"vector containing two seeds, u1 u2.","code":""},{"path":"/reference/generateUVector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate a vector of two random seeds. — generateUVector","text":"Phil Davies.","code":""},{"path":"/reference/getBASSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the BAS sample. — getBASSample","title":"Generate the BAS sample. — getBASSample","text":"function repeatedly called function spbal::getBASSampleDriver generate BAS sample.","code":""},{"path":"/reference/getBASSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the BAS sample. — getBASSample","text":"","code":"getBASSample(shapefile, bb, n, seeds, boxes = NULL)"},{"path":"/reference/getBASSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the BAS sample. — getBASSample","text":"shapefile Shape file polygon (sp sf) select sites . bb Bounding box defines area around study area. bounding box must supplied. n Number sites select. using stratification named vector containing sample sizes group. seeds vector 2 seeds, u1 u2. seeds must value function called. boxes vector integers points along Halton random starting point sample .","code":""},{"path":"/reference/getBASSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the BAS sample. — getBASSample","text":"list containing two variables, $sample containing locations BAS sample, BAS order $seeds, u1 u2 seeds used generate sample.","code":""},{"path":"/reference/getBASSample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate the BAS sample. — getBASSample","text":"function written Phil Davies.","code":""},{"path":"/reference/getBASSampleDriver.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage BAS sampling. — getBASSampleDriver","title":"Manage BAS sampling. — getBASSampleDriver","text":"function repeatedly calls function spbal::getBASSample generate BAS sample. requested number points within intersection shapefile study area obtained, sample seeds returned caller.","code":""},{"path":"/reference/getBASSampleDriver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage BAS sampling. — getBASSampleDriver","text":"","code":"getBASSampleDriver(shapefile, bb, n, seeds, verbose = FALSE)"},{"path":"/reference/getBASSampleDriver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage BAS sampling. — getBASSampleDriver","text":"shapefile sf shape file polygon select sites . bb Bounding box defines area around study area. bounding box must supplied. n Number sites select. using stratification named vector containing sample sizes group. seeds vector 2 seeds, u1 u2. specified, default NULL defined randomly. verbose Boolean want see output printed screen. Helpful taking long time. Default FALSE .e. informational messages displayed.","code":""},{"path":"/reference/getBASSampleDriver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage BAS sampling. — getBASSampleDriver","text":"list containing two variables, $sample containing locations BAS sample, BAS order $seeds, u1 u2 seeds used generate sample.","code":""},{"path":"/reference/getBASSampleDriver.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Manage BAS sampling. — getBASSampleDriver","text":"function written Phil Davies based origin code Paul van Dam-Bates BASMasterSample package.","code":""},{"path":"/reference/getHaltonFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a Halton Frame over a shapefile. — getHaltonFrame","title":"Obtain a Halton Frame over a shapefile. — getHaltonFrame","text":"internal function.","code":""},{"path":"/reference/getHaltonFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a Halton Frame over a shapefile. — getHaltonFrame","text":"","code":"getHaltonFrame(shapefile, J, i, bases, seeds, crs)"},{"path":"/reference/getHaltonFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a Halton Frame over a shapefile. — getHaltonFrame","text":"shapefile MULTIPOINT POINT object want generate halton frame . J number grid cells. list 2 values. integer add J parameter elements expand Halton Frame directions required number sample points found region interest current Halton frame. bases Co-prime base Halton Sequence. seeds list 2 seeds, u1 u2. crs Coordinate reference system shapefile.","code":""},{"path":"/reference/getHaltonFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a Halton Frame over a shapefile. — getHaltonFrame","text":"list containing following variables: hf_, sample, pts.shp, bb.new, seeds","code":""},{"path":"/reference/getHaltonFrame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain a Halton Frame over a shapefile. — getHaltonFrame","text":"function written Phil Davies.","code":""},{"path":"/reference/getHaltonPointsFromExpandableGrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Halton frame. — getHaltonPointsFromExpandableGrid","title":"Generate a Halton frame. — getHaltonPointsFromExpandableGrid","text":"Find requested number Halton points within study area using supplied J seeds parameters. number points found first attempt, frame expanded, spbal::getHaltonFrame called . process repeated requested number points found. points seeds used generate sample returned caller.","code":""},{"path":"/reference/getHaltonPointsFromExpandableGrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Halton frame. — getHaltonPointsFromExpandableGrid","text":"","code":"getHaltonPointsFromExpandableGrid(   shapefile,   N,   J = base::c(4, 3),   bases,   seeds,   crs,   verbose = FALSE,   stratify_found_first = FALSE )"},{"path":"/reference/getHaltonPointsFromExpandableGrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Halton frame. — getHaltonPointsFromExpandableGrid","text":"shapefile Shape file polygon (sp sf) study area(s). N Number sites select. using stratification named vector containing sample sizes group. J number grid cells. list 2 values. default value c(3, 2). bases Co-prime base Halton Sequence. default value c(2, 3). seeds vector 2 seeds, u1 u2. crs Coordinate reference system shapefile. verbose Boolean want see output printed screen. Helpful taking long time. Default FALSE .e. informational messages displayed. stratify_found_first flag indicate whether found first point study region . Default FALSE.","code":""},{"path":"/reference/getHaltonPointsFromExpandableGrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Halton frame. — getHaltonPointsFromExpandableGrid","text":"list containing five variables: index first point chosen random study area. diff_ Halton points, intersection bounding box study area. pts.shp Halton frame, sample points within study area. bb.new bounding box. seeds u1 u2 seeds used generate sample.","code":""},{"path":"/reference/getHaltonPointsFromExpandableGrid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate a Halton frame. — getHaltonPointsFromExpandableGrid","text":"Phil Davies.","code":""},{"path":"/reference/getPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all points with a specified panel id from a sample. — getPanel","title":"Extract all points with a specified panel id from a sample. — getPanel","text":"main function selecting sites using BAS master sample. assumes already defined master sample using BoundingBox() function selecting marine master sample site BC.","code":""},{"path":"/reference/getPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all points with a specified panel id from a sample. — getPanel","text":"","code":"getPanel(shapefile, panelid)"},{"path":"/reference/getPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all points with a specified panel id from a sample. — getPanel","text":"shapefile Shape file polygon (sp sf) containing sample contains feature column named panel_id. panelid overlapped panel shapefile shp user wants sample points .","code":""},{"path":"/reference/getPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all points with a specified panel id from a sample. — getPanel","text":"sample specified panel.","code":""},{"path":"/reference/getPanel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract all points with a specified panel id from a sample. — getPanel","text":"Phil Davies.","code":""},{"path":"/reference/getPanel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract all points with a specified panel id from a sample. — getPanel","text":"","code":"# Halton frame overlapping panel design showing use of getPanel.  # Use the North Carolina shapefile supplied in the sf R package. shp_file <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\")) #> Reading layer `nc' from data source  #>   `/home/phil/R/x86_64-pc-linux-gnu-library/4.3/sf/shape/nc.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 shp_gates <- shp_file[shp_file$NAME == \"Gates\",]  # Vertically aligned master sample bounding box. bb <- spbal::BoundingBox(shapefile = shp_gates)  # Three panels, of 20 samples each. panels <- c(20, 20, 20)  # second panel overlaps first panel by 5, and third panel # overlaps second panel by 5. panel_overlap <- c(0, 5, 5)  # generate the sample. samp <- spbal::HaltonFrame(J = c(4, 3),                            boundingbox = bb,                            panels = panels,                            panel_overlap = panel_overlap,                            shapefile = shp_gates)  # get halton frame data from our sample. samp3 <- samp$hf.pts.shp samp3 #> Simple feature collection with 309 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.93826 ymin: 36.29935 xmax: -76.47577 ymax: 36.55042 #> Geodetic CRS:  NAD27 #> First 10 features: #>    ID spbalSeqID                          x panel_id #> 1   1          1 POINT (-76.66076 36.45386)        1 #> 2   2          2 POINT (-76.78409 36.54077)        1 #> 4   4          3 POINT (-76.84576 36.40557)        1 #> 5   5          4  POINT (-76.5991 36.49248)        1 #> 6   6          5 POINT (-76.72243 36.34763)        1 #> 9   9          6   POINT (-76.6916 36.3766)        1 #> 10 10          7 POINT (-76.81493 36.46351)        1 #> 11 11          8 POINT (-76.56826 36.55042)        1 #> 13 13          9 POINT (-76.62993 36.38626)        1 #> 14 14         10 POINT (-76.75326 36.47317)        1  panelid <- 1 olPanel_1 <- spbal::getPanel(samp3, panelid)"},{"path":"/reference/getSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a sample of a specified size from a master sample. — getSample","title":"Extract a sample of a specified size from a master sample. — getSample","text":"description useful function.","code":""},{"path":"/reference/getSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a sample of a specified size from a master sample. — getSample","text":"","code":"getSample(shapefile, n, randomStart = FALSE, strata = NULL, stratum = NULL)"},{"path":"/reference/getSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a sample of a specified size from a master sample. — getSample","text":"shapefile MULTIPOINT POINT object take sample. n number sample points return. randomStart Whether spatially balanced sample randomly drawn frame . Default value FALSE. strata added stratum name column dataframe attached shapefile defines strata interest.","code":""},{"path":"/reference/getSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a sample of a specified size from a master sample. — getSample","text":"list containing following variable: sample sample shapefile POINTS.","code":""},{"path":"/reference/getSample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract a sample of a specified size from a master sample. — getSample","text":"Phil Davies.","code":""},{"path":"/reference/getSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a sample of a specified size from a master sample. — getSample","text":"","code":"# Draw a spatially balanced sample of n = 25 from a Halton Frame over Gates --  # Use the North Carolina shapefile supplied in the sf R package. shp_file <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\")) #> Reading layer `nc' from data source  #>   `/home/phil/R/x86_64-pc-linux-gnu-library/4.3/sf/shape/nc.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 shp_gates <- shp_file[shp_file$NAME == \"Gates\",]  # Vertically aligned master sample bounding box. bb <- spbal::BoundingBox(shapefile = shp_gates)  set.seed(511) result7 <- spbal::HaltonFrame(shapefile = shp_gates,                               J = c(6, 4),                               boundingbox = bb) Frame <- result7$hf.pts.shp  # Get the first 25 sites from a B = (2^6) * (3^4) Halton Frame (62,208 grid # points covering Gates). n_samples <- 25 FrameSample <-getSample(shapefile = Frame,                         n = n_samples) FrameSample <- FrameSample$sample FrameSample #> Simple feature collection with 25 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.94211 ymin: 36.309 xmax: -76.49504 ymax: 36.54077 #> Geodetic CRS:  NAD27 #> First 10 features: #>    ID spbalSeqID                          x #> 1   1          1 POINT (-76.59524 36.45064) #> 2   2          2 POINT (-76.71857 36.53755) #> 4   4          3 POINT (-76.94211 36.40235) #> 5   5          4 POINT (-76.69545 36.48926) #> 7   7          5 POINT (-76.57212 36.43132) #> 8   8          6 POINT (-76.88045 36.51823) #> 9   9          7 POINT (-76.63378 36.37338) #> 10 10          8 POINT (-76.75712 36.46029) #> 13 13          9 POINT (-76.66462 36.38626) #> 14 14         10 POINT (-76.78795 36.47317)"},{"path":"/reference/hipIndexRandomPermutation.html","id":null,"dir":"Reference","previous_headings":"","what":"Permute Halton indices. — hipIndexRandomPermutation","title":"Permute Halton indices. — hipIndexRandomPermutation","text":"description.","code":""},{"path":"/reference/hipIndexRandomPermutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permute Halton indices. — hipIndexRandomPermutation","text":"","code":"hipIndexRandomPermutation(its)"},{"path":"/reference/hipIndexRandomPermutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permute Halton indices. — hipIndexRandomPermutation","text":"number partitioning iterations.","code":""},{"path":"/reference/hipIndexRandomPermutation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permute Halton indices. — hipIndexRandomPermutation","text":"list containing following variables: permHaltonIndex permuted halton indices points. B number Halton boxes.","code":""},{"path":"/reference/hipIndexRandomPermutation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Permute Halton indices. — hipIndexRandomPermutation","text":"Phil Davies, Blair Robertson.","code":""},{"path":"/reference/hipPartition.html","id":null,"dir":"Reference","previous_headings":"","what":"Partition the population. — hipPartition","title":"Partition the population. — hipPartition","text":"Partition resource boxes nested structure Halton boxes. spbal parameter iterations defines number boxes used HIP partition larger sample size less population size.","code":""},{"path":"/reference/hipPartition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partition the population. — hipPartition","text":"","code":"hipPartition(pts, its)"},{"path":"/reference/hipPartition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partition the population. — hipPartition","text":"pts population points. number partitioning iterations.","code":""},{"path":"/reference/hipPartition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partition the population. — hipPartition","text":"list containing following variables: ptsIndex population index. HaltonIndex Updated Halton indices points pts.","code":""},{"path":"/reference/hipPartition.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Partition the population. — hipPartition","text":"Phil Davies, Blair Robertson.","code":""},{"path":"/reference/hipX1split.html","id":null,"dir":"Reference","previous_headings":"","what":"First dimension split. — hipX1split","title":"First dimension split. — hipX1split","text":"Split point pairs using first dimension.","code":""},{"path":"/reference/hipX1split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First dimension split. — hipX1split","text":"","code":"hipX1split(x1pts, HaltonIndex, BoxIndex, xlevel, x1Hpts)"},{"path":"/reference/hipX1split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"First dimension split. — hipX1split","text":"x1pts First dimension component point pair. HaltonIndex Halton indices points x1Hpts. BoxIndex Index current box process. xlevel current iteration level. x1Hpts First dimension component Halton point pair.","code":""},{"path":"/reference/hipX1split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"First dimension split. — hipX1split","text":"variable called HaltonIndex, updated Halton indices points x1Hpts.","code":""},{"path":"/reference/hipX1split.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"First dimension split. — hipX1split","text":"Phil Davies, Blair Robertson.","code":""},{"path":"/reference/hipX2split.html","id":null,"dir":"Reference","previous_headings":"","what":"Second dimension split. — hipX2split","title":"Second dimension split. — hipX2split","text":"Split point pairs using second dimension.","code":""},{"path":"/reference/hipX2split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Second dimension split. — hipX2split","text":"","code":"hipX2split(x2pts, HaltonIndex, BoxIndex, xlevel, x2Hpts)"},{"path":"/reference/hipX2split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Second dimension split. — hipX2split","text":"x2pts Second dimension component point pair. HaltonIndex Halton indices points x2Hpts. BoxIndex Index current box process. xlevel current iteration level. x2Hpts Second dimension component Halton point pair.","code":""},{"path":"/reference/hipX2split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Second dimension split. — hipX2split","text":"variable called HaltonIndex, updated Halton indices points x2Hpts.","code":""},{"path":"/reference/hipX2split.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Second dimension split. — hipX2split","text":"Phil Davies, Blair Robertson.","code":""},{"path":"/reference/is_sf_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is an sf points object. — is_sf_points","title":"Check if an object is an sf points object. — is_sf_points","text":"Tests object passed function sf points object . internal function.","code":""},{"path":"/reference/is_sf_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is an sf points object. — is_sf_points","text":"","code":"is_sf_points(x)"},{"path":"/reference/is_sf_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is an sf points object. — is_sf_points","text":"x probable sf points object.","code":""},{"path":"/reference/is_sf_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is an sf points object. — is_sf_points","text":"Either TRUE FALSE.","code":""},{"path":"/reference/is_sf_points.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an object is an sf points object. — is_sf_points","text":"Detect object sf points object .","code":""},{"path":"/reference/is_sf_points.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if an object is an sf points object. — is_sf_points","text":"Phil Davies, Blair Robertson.","code":""},{"path":"/reference/log_a_to_base_b.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log of a to base b. — log_a_to_base_b","title":"Compute the log of a to base b. — log_a_to_base_b","text":"Compute log base b.","code":""},{"path":"/reference/log_a_to_base_b.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log of a to base b. — log_a_to_base_b","text":"Integer find log base b . b Base","code":""},{"path":"/reference/log_a_to_base_b.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log of a to base b. — log_a_to_base_b","text":"log base b.","code":""},{"path":"/reference/log_a_to_base_b.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the log of a to base b. — log_a_to_base_b","text":"Phil Davies.","code":""},{"path":"/reference/mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector modulus. — mod","title":"Vector modulus. — mod","text":"Computes remainder dividing n using modulo operator. function uses trick avoid using modulo operator directly, can slow large values n.","code":""},{"path":"/reference/mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector modulus. — mod","text":"input value type T. NumericVector. n divisor type int.","code":""},{"path":"/reference/mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector modulus. — mod","text":"remainder dividing n, type T form NumericVector.","code":""},{"path":"/reference/mod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vector modulus. — mod","text":"Phil Davies.","code":""},{"path":"/reference/removeDuplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicate values from a NumericVector. — removeDuplicates","title":"Remove duplicate values from a NumericVector. — removeDuplicates","text":"Sort input numeric vector removes duplicate values.","code":""},{"path":"/reference/removeDuplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicate values from a NumericVector. — removeDuplicates","text":"vec NumericVector may contain duplicate values.","code":""},{"path":"/reference/removeDuplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove duplicate values from a NumericVector. — removeDuplicates","text":"NumericVector sorted duplicates removed.","code":""},{"path":"/reference/removeDuplicates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove duplicate values from a NumericVector. — removeDuplicates","text":"Phil Davies.","code":""},{"path":"/reference/rot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a rotation matrix for rotating objects later. — rot","title":"Generate a rotation matrix for rotating objects later. — rot","text":"Generate rotation matrix rotating objects later.","code":""},{"path":"/reference/rot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a rotation matrix for rotating objects later. — rot","text":"","code":"rot(a)"},{"path":"/reference/rot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a rotation matrix for rotating objects later. — rot","text":"radians rotation.","code":""},{"path":"/reference/rot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a rotation matrix for rotating objects later. — rot","text":"Matrix","code":""},{"path":"/reference/rot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate a rotation matrix for rotating objects later. — rot","text":"function first written Paul van Dam-Bates package BASMasterSample.","code":""},{"path":"/reference/rotate.scale.coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale and rotate points from the unit square to a defined projection. — rotate.scale.coords","title":"Scale and rotate points from the unit square to a defined projection. — rotate.scale.coords","text":"Given coordinates [0,1)x[0,1), shift scale bounding box, rotate given bounding box rotation defined Master Sample.","code":""},{"path":"/reference/rotate.scale.coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale and rotate points from the unit square to a defined projection. — rotate.scale.coords","text":"","code":"rotate.scale.coords(coords, bb, back = TRUE)"},{"path":"/reference/rotate.scale.coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale and rotate points from the unit square to a defined projection. — rotate.scale.coords","text":"coords Output RSHalton() converted spatial surface interest. bb Special shape file defining bounding box attributes centroid rotation. back Boolean whether rotation back original rotated bounding box.","code":""},{"path":"/reference/rotate.scale.coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale and rotate points from the unit square to a defined projection. — rotate.scale.coords","text":"sf spatial points projection defined bb.","code":""},{"path":"/reference/rotate.scale.coords.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Scale and rotate points from the unit square to a defined projection. — rotate.scale.coords","text":"function first written Paul van Dam-Bates package BASMasterSample.","code":""},{"path":"/reference/setBASIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds a set of Halton indices that will create BAS points within a shape bounding box. — setBASIndex","title":"Finds a set of Halton indices that will create BAS points within a shape bounding box. — setBASIndex","text":"function designed called internally efficiency site selection.","code":""},{"path":"/reference/setBASIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds a set of Halton indices that will create BAS points within a shape bounding box. — setBASIndex","text":"","code":"setBASIndex(shapefile, bb, seeds = base::c(0, 0))"},{"path":"/reference/setBASIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds a set of Halton indices that will create BAS points within a shape bounding box. — setBASIndex","text":"shapefile Shape file polygon (sp sf) select sites . bb Bounding box defines area around study area. bounding box must supplied. seeds vector 2 seeds, u1 u2. seeds must value function called.","code":""},{"path":"/reference/setBASIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds a set of Halton indices that will create BAS points within a shape bounding box. — setBASIndex","text":"list containing two variables, $boxes containing indices BAS sample fall bounding box, $J, number subdivision powers taken find boxes, $B, number boxes indices relate (1-B), $xlim, ylimit bounding box shapefile, shifted base[1]^J[1] coordinates unit box [0,1), $ylim, ylimit bounding box shapefile, shifted base[2]^J[2] coordinates unit box [0,1).","code":""},{"path":"/reference/setBASIndex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Finds a set of Halton indices that will create BAS points within a shape bounding box. — setBASIndex","text":"used Master Sample bounding box greater frame potentially much larger polygon sampled. case, want generate points across entire larger bounding box region clip . Instead, can make use Halton sequence generate BAS points near shape sampled. function finds returns indices.","code":""},{"path":"/reference/validate_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate spbal function parameters. — validate_parameters","title":"Validate spbal function parameters. — validate_parameters","text":"function used validate parameters passed spbal functions may called user.","code":""},{"path":"/reference/validate_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate spbal function parameters. — validate_parameters","text":"","code":"validate_parameters(parm, parm_value)"},{"path":"/reference/validate_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate spbal function parameters. — validate_parameters","text":"parm parameter validated. parm_value value parameter validated. Must defined list.","code":""},{"path":"/reference/validate_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate spbal function parameters. — validate_parameters","text":"Always returns TRUE indicating parameter parsed successfully. parameter fails validation execution terminated using STOP function.","code":""},{"path":"/reference/validate_parameters.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Validate spbal function parameters. — validate_parameters","text":"Phil Davies.","code":""},{"path":"/news/index.html","id":"spbal-100","dir":"Changelog","previous_headings":"","what":"spbal 1.0.0","title":"spbal 1.0.0","text":"CRAN release: 2024-05-17 Initial CRAN submission.","code":""}]
